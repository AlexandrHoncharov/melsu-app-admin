import datetime
import os
import uuid
from functools import wraps
from urllib.parse import unquote
import os
import re
import firebase_admin
import jwt
import requests
from bs4 import BeautifulSoup
from firebase_admin import credentials, auth, messaging
from flask import Flask
from flask import Response
from flask import request, jsonify, send_from_directory
from flask_cors import CORS
from werkzeug.security import generate_password_hash
from werkzeug.utils import secure_filename

from db import db
from models import Ticket, TicketMessage, TicketAttachment
from models import User, Teacher, VerificationLog, Schedule, ScheduleTeacher, DeviceToken

# Firebase initialization removed
FIREBASE_AVAILABLE = False
print("Firebase Admin SDK disabled. FCM notifications have been disabled.")

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app = Flask(__name__)
CORS(app)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
app.config.from_object('config')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.init_app(app)

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
UPLOAD_FOLDER = 'uploads'
STUDENT_CARDS_FOLDER = os.path.join(UPLOAD_FOLDER, 'student_cards')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(STUDENT_CARDS_FOLDER, exist_ok=True)

TICKET_ATTACHMENTS_FOLDER = os.path.join(UPLOAD_FOLDER, 'ticket_attachments')
os.makedirs(TICKET_ATTACHMENTS_FOLDER, exist_ok=True)

app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024




def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if 'Authorization' in request.headers:
            auth_header = request.headers['Authorization']
            if auth_header.startswith('Bearer '):
                token = auth_header.split(' ')[1]

        if not token:
            return jsonify({'message': '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}), 401

        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            payload = jwt.decode(token, app.config.get('SECRET_KEY'), algorithms=['HS256'])
            user_id = payload['sub']
            current_user = User.query.get(user_id)

            if not current_user:
                return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 401

        except jwt.ExpiredSignatureError:
            return jsonify({'message': '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'message': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'}), 401

        return f(current_user, *args, **kwargs)

    return decorated


def validate_fcm_token(token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not token:
        return False

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    token = str(token)

    # –û–±—Ä–µ–∑–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    token_preview = token[:15] + "..." if len(token) > 15 else token

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —à–∞–±–ª–æ–Ω–∞–º
    is_jwt = token.count('.') == 2 and token.startswith('ey')
    is_expo = token.startswith('ExponentPushToken[')
    is_fcm_format = bool(re.match(r'^[a-zA-Z0-9:_-]+$', token))

    print(f"üí´ –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê: {token_preview}")
    print(f"   - –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(token)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   - –ü–æ—Ö–æ–∂ –Ω–∞ JWT: {is_jwt}")
    print(f"   - –ü–æ—Ö–æ–∂ –Ω–∞ Expo token: {is_expo}")
    print(f"   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É FCM: {is_fcm_format}")

    if is_jwt:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—É—á–µ–Ω JWT-—Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ FCM-—Ç–æ–∫–µ–Ω–∞")
        return False
    elif is_expo:
        print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω Expo token, –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Firebase Admin SDK")
        # –î–ª—è Expo —Ç–æ–∫–µ–Ω–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        return False
    elif not is_fcm_format:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É FCM")
        return False

    return True


# –ó–∞–º–µ–Ω–∏—Ç–µ –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase (–Ω–∞–π–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ)
try:
    print(f"üì± –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin SDK")
    print(f"   - –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"   - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {os.path.abspath('firebase.json')}")
    print(f"   - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists('firebase.json')}")

    if not os.path.exists('firebase.json'):
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª firebase.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise FileNotFoundError("–§–∞–π–ª firebase.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

    cred = credentials.Certificate('firebase.json')
    firebase_admin.initialize_app(cred)
    print(f"   ‚úÖ Firebase Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    FIREBASE_AVAILABLE = True
except Exception as e:
    print(f"   ‚ùå –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin SDK: {str(e)}")
    print(f"   - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    import traceback

    traceback.print_exc()
    FIREBASE_AVAILABLE = False
    print(f"   ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è FCM –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")

@app.route('/api/news', methods=['GET'])
def get_news():
    """Get news from the university website with image proxy"""
    try:
        # Get page parameter (default to 1)
        page = request.args.get('page', 1, type=int)
        print(f"Fetching news page: {page}")

        # Create base URL for absolute links
        host_url = request.host_url.rstrip('/')

        # Fetch the news page
        url = f"https://melsu.ru/news?page={page}"
        response = requests.get(url, timeout=15)

        if response.status_code != 200:
            print(f"Failed to fetch news, status code: {response.status_code}")
            return jsonify({"message": "Failed to fetch news", "success": False}), 500

        # Parse HTML
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find news items
        news_items = []

        # –ò—â–µ–º –±–ª–æ–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (–∫–∞–∫ –ø–µ—Ä–≤—ã–µ, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ)
        news_boxes = soup.select('.news-box, .first-news-box')

        for news_box in news_boxes:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
                link = news_box.select_one('a')
                if not link:
                    continue

                href = link.get('href')
                if not href:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏
                match = re.search(r'/news/show/(\d+)', href)
                if not match:
                    continue

                news_id = match.group(1)

                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏
                image_tag = news_box.select_one('img')
                image_url = None
                original_src = None

                if image_tag and image_tag.get('src'):
                    original_src = image_tag['src']

                    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–∫—Å–∏
                    if original_src.startswith('http'):
                        original_url = original_src
                    else:
                        original_url = f"https://melsu.ru/{original_src.lstrip('/')}"

                    # –ö–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                    from urllib.parse import quote
                    encoded_url = quote(original_url)
                    image_url = f"{host_url}/api/image-proxy?url={encoded_url}"

                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_tag = news_box.select_one('.meta-category')
                category = category_tag.text.strip() if category_tag else None

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
                date_tag = news_box.select_one('.bi-calendar2-week')
                date = date_tag.parent.text.strip() if date_tag and date_tag.parent else None

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title_container = news_box.select_one('h2') or news_box.select_one('h3') or news_box.select_one(
                    '.title')
                title = title_container.text.strip() if title_container else None

                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ - –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                description = None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
                if "first-news-box" in news_box.get('class', []):
                    # –î–ª—è –≥–ª–∞–≤–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
                    description_selectors = ['.line-clamp-10 p', '.line-clamp-10', 'p']
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                    description_selectors = ['.description-news p', '.description-news', '.line-clamp-3', 'p']

                for selector in description_selectors:
                    description_elements = news_box.select(selector)
                    if description_elements:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
                        for elem in description_elements:
                            text = elem.text.strip()
                            if text and text != title:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                                description = text
                                break
                    if description:
                        break

                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–æ–≤–æ—Å—Ç–∏
                if href.startswith('http'):
                    news_url = href
                else:
                    if href.startswith('/'):
                        href = href[1:]
                    news_url = f"https://melsu.ru/{href}"

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫
                news_items.append({
                    "id": news_id,
                    "title": title,
                    "category": category,
                    "date": date,
                    "description": description,
                    "image_url": image_url,
                    "url": news_url,
                    "_debug_original_src": original_src  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                })
            except Exception as item_error:
                print(f"Error processing news item: {str(item_error)}")
                continue

        # Check if there is a next page
        pagination = soup.select_one('.pagination')
        has_next_page = True

        # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if pagination:
            next_page = page + 1
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            next_page_links = pagination.select(f'a[href="/news?page={next_page}"]')
            original_has_next_page = len(next_page_links) > 0

            # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {next_page}: {original_has_next_page}")
            print(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º has_next_page=True")

        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π, has_next_page: {has_next_page}")

        print(f"Processed {len(news_items)} news items, has_next_page: {has_next_page}")
        if news_items:
            print(f"First news item: {news_items[0]['title']}, image: {news_items[0]['image_url']}")

        return jsonify({
            "news": news_items,
            "page": page,
            "has_next_page": has_next_page,
            "success": True
        }), 200

    except Exception as e:
        print(f"Error getting news: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}", "success": False}), 500


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
import re
import html


def clean_text(text):
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    """
    if not text:
        return ""

    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Unicode
    text = re.sub(r'[\u200B-\u200D\uFEFF]', '', text)

    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π (&nbsp; –∏ —Ç.–¥.)
    text = html.unescape(text)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã
    text = text.replace('\u200b', '')

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    return text.strip()


def format_content_text(content_text):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    """
    if not content_text:
        return ""

    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    text = clean_text(content_text)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –∞–±–∑–∞—Ü–µ–≤
    text = re.sub(r'(?m)^\s+', '', text)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤
    paragraphs = text.split('\n\n')
    formatted_paragraphs = [p.strip() for p in paragraphs if p.strip()]

    # –°–æ–µ–¥–∏–Ω—è–µ–º –∞–±–∑–∞—Ü—ã —Å –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return '\n\n'.join(formatted_paragraphs)


def extract_formatted_text_from_html(html_content):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∂–∏—Ä–Ω—ã–π, —Å–ø–∏—Å–∫–∏ –∏ —Ç.–¥.)
    """
    if not html_content:
        return ""

    soup = BeautifulSoup(html_content, 'html.parser')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    result_text = ""
    current_list_index = 0

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    for element in soup.find_all(['p', 'strong', 'b', 'ol', 'ul', 'li', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']):
        tag_name = element.name

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        if element.parent.name in ['ol', 'ul'] and tag_name != 'li':
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±–∑–∞—Ü–µ–≤
        if tag_name == 'p':
            paragraph_text = element.get_text().strip()
            if paragraph_text:
                result_text += paragraph_text + "\n\n"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        elif tag_name.startswith('h'):
            result_text += element.get_text().strip() + "\n\n"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö) —Å–ø–∏—Å–∫–æ–≤
        elif tag_name == 'ol':
            current_list_index = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
            # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            for li in element.find_all('li', recursive=False):
                current_list_index += 1
                li_text = li.get_text().strip()
                result_text += f"{current_list_index}. {li_text}\n"
            result_text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
        elif tag_name == 'ul':
            for li in element.find_all('li', recursive=False):
                li_text = li.get_text().strip()
                result_text += f"‚Ä¢ {li_text}\n"
            result_text += "\n"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤–ª–æ–∂–µ–Ω—ã –≤ ol/ul)
        elif tag_name == 'li' and element.parent.name not in ['ol', 'ul']:
            li_text = element.get_text().strip()
            result_text += f"‚Ä¢ {li_text}\n"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
        elif tag_name == 'div':
            div_text = element.get_text().strip()
            if div_text:
                result_text += div_text + "\n\n"

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    result_text = re.sub(r'\n{3,}', '\n\n', result_text)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return clean_text(result_text)


def process_html_for_mobile_display(html_content):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö,
    —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–∂–∏—Ä–Ω—ã–π, —Å–ø–∏—Å–∫–∏ –∏ —Ç.–¥.)
    """
    if not html_content:
        return ""

    soup = BeautifulSoup(html_content, 'html.parser')

    # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for img in soup.find_all('img'):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        img['style'] = 'max-width: 100%; height: auto; display: block; margin: 10px auto;'

    # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–±–∑–∞—Ü—ã
    for p in soup.find_all('p'):
        p['style'] = 'margin-bottom: 16px; line-height: 1.5;'

    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for i in range(1, 7):
        for heading in soup.find_all(f'h{i}'):
            heading['style'] = f'font-size: {24 - (i - 1) * 2}px; font-weight: bold; margin: 20px 0 10px 0;'

    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
    for ol in soup.find_all('ol'):
        ol['style'] = 'margin-bottom: 16px; padding-left: 24px;'

    for ul in soup.find_all('ul'):
        ul['style'] = 'margin-bottom: 16px; padding-left: 24px; list-style-type: disc;'

    for li in soup.find_all('li'):
        li['style'] = 'margin-bottom: 8px;'

    # 5. –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    for strong in soup.find_all(['strong', 'b']):
        strong['style'] = 'font-weight: bold;'

    # 6. –¢–∞–±–ª–∏—Ü—ã
    for table in soup.find_all('table'):
        table['style'] = 'width: 100%; margin-bottom: 16px; border-collapse: collapse;'

        for td in table.find_all('td'):
            td['style'] = 'padding: 8px; border: 1px solid #ddd;'

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π HTML
    return str(soup)


def process_text_with_formatting(html_text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML-—Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤ –∏ —Ç.–¥.)"""
    if not html_text:
        return ""

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π
    if not isinstance(html_text, str):
        html_text = str(html_text)

    # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    html_text = re.sub(r'<span class="image-marker"[^>]*>.*?</span>', '', html_text)

    # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ <strong> –∏ <b> –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    html_text = re.sub(r'<(strong|b)>(.*?)</(strong|b)>', r'**\2**', html_text, flags=re.DOTALL)

    # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ <em> –∏ <i> –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    html_text = re.sub(r'<(em|i)>(.*?)</(em|i)>', r'_\2_', html_text, flags=re.DOTALL)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Ç–µ–≥–∏
    html_text = re.sub(r'<[^>]+>', '', html_text)

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    html_text = html.unescape(html_text)

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    html_text = re.sub(r'\s+', ' ', html_text).strip()

    return html_text


def parse_news_detail_for_mobile(html_content):
    """
    –ü–∞—Ä—Å–∏—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–∏–ø–∞–º–∏:
    - "text": –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∂–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
    - "image": –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL
    - "list": –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    - "table": —Ç–∞–±–ª–∏—Ü–∞
    """
    if not html_content:
        return []

    try:
        soup = BeautifulSoup(html_content, 'html.parser')

        # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_blocks = []

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –ø–æ–∑–∏—Ü–∏–∏
        all_images = soup.find_all('img')
        image_positions = {}

        for img in all_images:
            if img.get('src'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                img_id = f"img_{len(image_positions)}"
                image_positions[img_id] = {
                    'src': img.get('src'),
                    'processed': False
                }
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥ img –Ω–∞ –º–∞—Ä–∫–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
                marker = soup.new_tag('span')
                marker['class'] = 'image-marker'
                marker['data-image-id'] = img_id
                img.replace_with(marker)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±–∑–∞—Ü–µ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for element in soup.find_all(['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'table']):
            tag_name = element.name

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±–∑–∞—Ü–µ–≤
            if tag_name == 'p':
                # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –∞–±–∑–∞—Ü–∞
                element_text = str(element)
                markers = element.find_all('span', class_='image-marker')

                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                if markers:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
                    text_before = process_text_with_formatting(str(element))
                    if text_before.strip():
                        content_blocks.append({
                            "type": "text",
                            "content": text_before
                        })

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    for marker in markers:
                        img_id = marker.get('data-image-id')
                        if img_id and img_id in image_positions and not image_positions[img_id]['processed']:
                            content_blocks.append({
                                "type": "image",
                                "src": image_positions[img_id]['src']
                            })
                            image_positions[img_id]['processed'] = True
                else:
                    # –ü–∞—Ä—Å–∏–º –∞–±–∑–∞—Ü —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∂–∏—Ä–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
                    formatted_text = process_text_with_formatting(str(element))
                    if formatted_text.strip():
                        content_blocks.append({
                            "type": "text",
                            "content": formatted_text
                        })

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            elif tag_name.startswith('h'):
                level = int(tag_name[1])
                content_blocks.append({
                    "type": "header",
                    "level": level,
                    "content": process_text_with_formatting(element.get_text())
                })

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
            elif tag_name == 'ul' or tag_name == 'ol':
                list_items = []
                for li in element.find_all('li', recursive=False):
                    list_items.append(process_text_with_formatting(li.get_text()))

                content_blocks.append({
                    "type": "list",
                    "list_type": "ordered" if tag_name == 'ol' else "unordered",
                    "items": list_items
                })

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
            elif tag_name == 'table':
                # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                table_images = element.find_all('span', class_='image-marker')
                for marker in table_images:
                    img_id = marker.get('data-image-id')
                    if img_id and img_id in image_positions and not image_positions[img_id]['processed']:
                        content_blocks.append({
                            "type": "image",
                            "src": image_positions[img_id]['src']
                        })
                        image_positions[img_id]['processed'] = True

                # –£–ø—Ä–æ—â–µ–Ω–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
                table_text = element.get_text().strip()
                if table_text:
                    content_blocks.append({
                        "type": "text",
                        "content": "–¢–∞–±–ª–∏—Ü–∞: " + table_text
                    })

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
        for img_id, img_info in image_positions.items():
            if not img_info['processed']:
                content_blocks.append({
                    "type": "image",
                    "src": img_info['src']
                })
                img_info['processed'] = True

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
        merged_blocks = []
        current_text = ""

        for block in content_blocks:
            if block["type"] == "text":
                if current_text:
                    current_text += "\n\n" + block["content"]
                else:
                    current_text = block["content"]
            else:
                if current_text:
                    merged_blocks.append({
                        "type": "text",
                        "content": current_text
                    })
                    current_text = ""
                merged_blocks.append(block)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if current_text:
            merged_blocks.append({
                "type": "text",
                "content": current_text
            })

        return merged_blocks

    except Exception as e:
        print(f"Error parsing HTML content: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        return [{
            "type": "text",
            "content": BeautifulSoup(html_content, 'html.parser').get_text()
        }]


def update_api_response_with_content_blocks(api_response, host_url):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç API, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    if not api_response or not api_response.get('content_html'):
        return api_response

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
        content_blocks = parse_news_detail_for_mobile(api_response['content_html'])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        for block in content_blocks:
            if block['type'] == 'image' and block.get('src'):
                src = block['src']

                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–∫—Å–∏
                if src.startswith('http'):
                    original_url = src
                else:
                    original_url = f"https://melsu.ru/{src.lstrip('/')}"

                # –ö–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                from urllib.parse import quote
                encoded_url = quote(original_url)
                proxy_url = f"{host_url}/api/image-proxy?url={encoded_url}"

                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ–∫—Å–∏-URL
                block['src'] = proxy_url

        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –≤ –æ—Ç–≤–µ—Ç API
        api_response['content_blocks'] = content_blocks

        return api_response
    except Exception as e:
        print(f"Error creating content blocks: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return api_response


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ get_news_detail –≤ api.py

@app.route('/api/news/<int:news_id>', methods=['GET'])
def get_news_detail(news_id):
    """Get detailed news article by ID with image proxy and improved content structure"""
    try:
        print(f"Fetching news detail for ID: {news_id}")

        # Create base URL for absolute links
        host_url = request.host_url.rstrip('/')

        # Fetch the news article
        url = f"https://melsu.ru/news/show/{news_id}"
        response = requests.get(url, timeout=15)

        if response.status_code != 200:
            print(f"News article not found, status code: {response.status_code}")
            return jsonify({"message": "News article not found", "success": False}), 404

        # Parse HTML
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract title and clean it
        title_tag = soup.select_one('h1.text-4xl') or soup.select_one('h1')
        title = clean_text(title_tag.text.strip()) if title_tag else None

        # Extract date
        date_tag = soup.select_one('.bi-calendar2-week')
        date = clean_text(date_tag.parent.text.strip()) if date_tag and date_tag.parent else None

        # Extract content
        content_div = soup.select_one('.content-news')
        content_html = None
        content_text = None

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        result = {
            "id": str(news_id),
            "title": title,
            "date": date,
            "category": None,
            "content_html": None,
            "content_text": None,
            "images": [],
            "success": True
        }

        # Get category from breadcrumbs or meta tag
        category_tag = soup.select_one('.meta-category')
        if category_tag:
            result["category"] = clean_text(category_tag.text.strip())
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–∫–∞—Ö
            breadcrumbs = soup.select('.breadcrumbs .crumb-home')
            if len(breadcrumbs) > 1:
                result["category"] = clean_text(breadcrumbs[1].text.strip())

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
        if content_div:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
            result["content_html"] = str(content_div)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            result["content_text"] = extract_formatted_text_from_html(str(content_div))

            # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —à–∞–ø–∫–µ —Å—Ç–∞—Ç—å–∏)
            header_img = soup.select_one('.img-news-box img') or soup.select_one('.header-image img')
            if header_img and header_img.get('src'):
                src = header_img['src']
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–∫—Å–∏
                if src.startswith('http'):
                    original_url = src
                else:
                    original_url = f"https://melsu.ru/{src.lstrip('/')}"

                # –ö–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                from urllib.parse import quote
                encoded_url = quote(original_url)
                proxy_url = f"{host_url}/api/image-proxy?url={encoded_url}"
                result["images"].append(proxy_url)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π
            # —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ –º–µ—Å—Ç—É –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
            result = update_api_response_with_content_blocks(result, host_url)

        # Check for previous and next articles
        prev_article = None
        next_article = None

        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é/—Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å
        navigation_links = soup.select('a[href^="/news/show/"]')

        for link in navigation_links:
            link_text = link.text.strip().lower()
            href = link.get('href', '')

            if not href:
                continue

            match = re.search(r'/news/show/(\d+)', href)
            if not match:
                continue

            news_id_from_link = match.group(1)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Å—Å—ã–ª–∫–∏, —ç—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å
            if '–ø—Ä–µ–¥—ã–¥—É—â' in link_text or '–ø—Ä–µ–¥' in link_text or '‚Üê' in link_text:
                title_span = link.select_one('span')
                prev_title = clean_text(title_span.text.strip()) if title_span else "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
                prev_article = {
                    "id": news_id_from_link,
                    "title": prev_title
                }
            elif '—Å–ª–µ–¥—É—é—â' in link_text or '—Å–ª–µ–¥' in link_text or '‚Üí' in link_text:
                title_span = link.select_one('span')
                next_title = clean_text(title_span.text.strip()) if title_span else "–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
                next_article = {
                    "id": news_id_from_link,
                    "title": next_title
                }

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é (–ø–µ—Ä–≤–∞—è/–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞)
        if not prev_article and not next_article and len(navigation_links) >= 2:
            first_link = navigation_links[0]
            last_link = navigation_links[-1]

            # –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è, –ø–æ—Å–ª–µ–¥–Ω—è—è - —Å–ª–µ–¥—É—é—â–∞—è
            first_match = re.search(r'/news/show/(\d+)', first_link.get('href', ''))
            last_match = re.search(r'/news/show/(\d+)', last_link.get('href', ''))

            if first_match:
                prev_article = {
                    "id": first_match.group(1),
                    "title": "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
                }

            if last_match:
                next_article = {
                    "id": last_match.group(1),
                    "title": "–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å"
                }

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ
        result["prev_article"] = prev_article
        result["next_article"] = next_article

        print(f"Successfully fetched news detail for ID {news_id}")
        if result["images"]:
            print(f"Found {len(result['images'])} main images")

        if "content_blocks" in result:
            image_blocks = [block for block in result["content_blocks"] if block.get("type") == "image"]
            print(f"Found {len(image_blocks)} content blocks with images")

        return jsonify(result), 200

    except Exception as e:
        print(f"Error getting news detail: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}", "success": False}), 500


@app.route('/api/image-proxy', methods=['GET'])
def image_proxy():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–∞–π—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    try:
        image_url = request.args.get('url')
        if not image_url:
            return jsonify({"message": "URL parameter is required"}), 400

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω
        try:
            image_url = unquote(image_url)
        except:
            pass

        # –ï—Å–ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
        if not image_url.startswith(('http://', 'https://')):
            if not image_url.startswith('/'):
                image_url = f"/{image_url}"
            image_url = f"https://melsu.ru{image_url}"

        print(f"Proxying image from: {image_url}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Referer': 'https://melsu.ru/',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
        }

        response = requests.get(image_url, stream=True, headers=headers, timeout=10)

        if response.status_code != 200:
            print(f"Failed to fetch image, status code: {response.status_code}")
            return jsonify({"message": "Failed to fetch image"}), response.status_code

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = response.headers.get('Content-Type', 'image/jpeg')

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        return Response(
            response.content,
            content_type=content_type,
            headers={
                'Access-Control-Allow-Origin': '*',  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                'Cache-Control': 'public, max-age=86400',  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 24 —á–∞—Å–∞
                'Content-Length': str(len(response.content))
            }
        )

    except Exception as e:
        print(f"Error in image proxy: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


def generate_username(full_name, group=None, role=None, department=None):
    """Generate a username based on full name, role, and other details

    Args:
        full_name (str): The person's full name
        group (str, optional): Student's group (for students)
        role (str, optional): 'student' or 'teacher'
        department (str, optional): Teacher's department (for teachers)

    Returns:
        str: A generated username
    """
    import re
    import random
    import string
    import transliterate

    # Handle empty or invalid name
    if not full_name or full_name.strip() == '':
        return ''.join(random.choices(string.ascii_lowercase, k=6))

    # Remove any non-alphanumeric characters and split the name
    # First try to transliterate if the name contains Cyrillic characters
    if re.search('[–∞-—è–ê-–Ø]', full_name):
        try:
            transliterated = transliterate.translit(full_name, 'ru', reversed=True)
            # Remove diacritical marks
            transliterated = ''.join(c for c in unicodedata.normalize('NFD', transliterated)
                                     if unicodedata.category(c) != 'Mn')
            clean_name = transliterated
        except:
            # If transliteration fails, just use the original with non-alphanumeric chars removed
            clean_name = ''.join(c for c in full_name if c.isalnum() or c.isspace())
    else:
        clean_name = ''.join(c for c in full_name if c.isalnum() or c.isspace())

    name_parts = clean_name.split()

    if not name_parts:
        return ''.join(random.choices(string.ascii_lowercase, k=6))

    # Different username formation based on role
    if role == 'teacher':
        # For teachers: lastname.firstname or lastname.initial
        if len(name_parts) >= 2:
            lastname = name_parts[-1].lower()
            firstname = name_parts[0].lower()

            # Include department code if available (first 2-3 letters)
            dept_code = ""
            if department:
                # Extract department code
                dept_words = department.split()
                if dept_words:
                    # Take first letters of each word in department name
                    dept_code = ''.join(word[0].lower() for word in dept_words if word)
                    dept_code = dept_code[:3]  # Limit to 3 chars

            # Try a few username patterns
            if len(lastname) > 2 and len(firstname) > 2:
                username = f"{lastname}.{firstname[:3]}{dept_code}"
            else:
                # If names are very short, use full first name
                username = f"{lastname}.{firstname}{dept_code}"
        else:
            # If only one name part is available
            username = f"{name_parts[0].lower()}"
    else:
        # For students or default
        if len(name_parts) >= 2:
            # Get first name and last name
            firstname = name_parts[0].lower()
            lastname = name_parts[-1].lower()

            # Take first three letters of first name and last name
            # unless they're shorter
            first_part = firstname[:min(3, len(firstname))]
            last_part = lastname[:min(4, len(lastname))]

            # Group code (clean and take up to 3 chars)
            group_code = ""
            if group:
                # Extract numeric part of the group if possible
                match = re.search(r'\d+', group)
                if match:
                    group_code = match.group()[:2]  # Take first 2 digits
                else:
                    # Otherwise take first 2-3 alphanumeric chars
                    clean_group = ''.join(c for c in group if c.isalnum())
                    group_code = clean_group[:3].lower()

            # Build the username with a more readable structure
            username = f"{first_part}_{last_part}"

            if group_code:
                username = f"{username}{group_code}"
        else:
            # If only one name part is available
            name = name_parts[0].lower()
            username = f"{name[:6]}"  # Take up to 6 chars

    # Add a small random suffix to handle duplicates (2 digits)
    random_suffix = ''.join(random.choices(string.digits, k=2))
    username = f"{username}{random_suffix}"

    # Remove any non-alphanumeric characters
    username = ''.join(c for c in username if c.isalnum() or c == '_' or c == '.')

    # Ensure username is not too long
    if len(username) > 20:
        username = username[:20]

    return username


@app.route('/api/auth/firebase-token', methods=['POST'])
@token_required
def get_firebase_token(current_user):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è Firebase
        firebase_token = auth.create_custom_token(str(current_user.id))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'id': current_user.id,
            'username': current_user.username,
            'fullName': current_user.full_name,
            'role': current_user.role
        }

        if current_user.role == 'student':
            user_data['group'] = current_user.group
            user_data['faculty'] = current_user.faculty
        elif current_user.role == 'teacher':
            teacher = Teacher.query.filter_by(user_id=current_user.id).first()
            if teacher:
                user_data['department'] = teacher.department
                user_data['position'] = teacher.position

        return jsonify({
            'token': firebase_token.decode('utf-8'),
            'userData': user_data
        })
    except Exception as e:
        print(f"Error creating Firebase token: {str(e)}")
        return jsonify({'message': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'}), 500


# Add these endpoints to your api.py file

@app.route('/api/schedule/groups', methods=['GET'])
@token_required
def get_schedule_groups(current_user):
    """Get unique groups from the schedule"""
    try:
        # Get unique groups directly from schedule table
        groups = db.session.query(db.distinct(Schedule.group_name)) \
            .filter(Schedule.group_name.isnot(None)) \
            .order_by(Schedule.group_name).all()

        # Format response
        groups_list = [{"name": group[0]} for group in groups if group[0]]

        return jsonify(groups_list), 200
    except Exception as e:
        print(f"Error getting groups: {str(e)}")
        return jsonify({"message": f"Error getting groups: {str(e)}"}), 500


@app.route('/api/users', methods=['GET'])
@token_required
def get_users(current_user):
    """Get users filtered by role and optionally by group and verification status"""
    role = request.args.get('role')
    group = request.args.get('group')
    verification_status = request.args.get('verification_status')

    query = User.query
    if role:
        query = query.filter_by(role=role)

    # Add filter by group if specified
    if group:
        query = query.filter_by(group=group)

    # Add filter by verification status if specified
    if verification_status:
        if verification_status == 'verified_only':
            query = query.filter_by(verification_status='verified')
        elif verification_status == 'all':
            # No filtering, return all users regardless of verification
            pass
        elif verification_status == 'unverified_only':
            query = query.filter(User.verification_status.in_(['unverified', 'pending', 'rejected']))

    users = query.all()

    result = []
    for user in users:
        if user.id != current_user.id:  # Exclude current user
            user_data = {
                'id': user.id,
                'username': user.username,
                'fullName': user.full_name,
                'role': user.role,
                'verificationStatus': user.verification_status or 'verified'  # Add verification status
            }

            if user.role == 'student':
                user_data['group'] = user.group
                user_data['faculty'] = user.faculty
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                user_data['speciality'] = {
                    'id': user.speciality_id,
                    'code': user.speciality_code,
                    'name': user.speciality_name,
                    'form': user.study_form,
                    'formName': user.study_form_name
                } if user.speciality_id else None
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                try:
                    schedule_item = Schedule.query.filter_by(group_name=user.group).first()
                    if schedule_item:
                        user_data['course'] = schedule_item.course
                except Exception as e:
                    print(f"Error getting course from schedule: {str(e)}")
            elif user.role == 'teacher':
                teacher = Teacher.query.filter_by(user_id=user.id).first()
                if teacher:
                    user_data['department'] = teacher.department
                    user_data['position'] = teacher.position

            result.append(user_data)

    return jsonify(result)


@app.route('/api/users/<int:user_id>', methods=['GET'])
@token_required
def get_user(current_user, user_id):
    user = User.query.get(user_id)

    if not user:
        return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = {
        'id': user.id,
        'username': user.username,
        'fullName': user.full_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º camelCase —Ñ–æ—Ä–º–∞—Ç
        'role': user.role,
        'group': user.group,
        'faculty': user.faculty,
        'speciality': {
            'id': user.speciality_id,
            'code': user.speciality_code,
            'name': user.speciality_name,
            'form': user.study_form,
            'formName': user.study_form_name
        } if user.speciality_id else None
    }

    # –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Teacher
    if user.role == 'teacher':
        # –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ Teacher
        teacher = Teacher.query.filter_by(user_id=user.id).first()

        if teacher:
            user_data['department'] = teacher.department
            user_data['position'] = teacher.position

            # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Teacher
            # –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ fullName –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            if teacher.name:
                user_data['fullName'] = teacher.name  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è
                user_data['teacher_name'] = teacher.name  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

                # –ï—Å–ª–∏ –∏–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ–µ, –Ω–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ Teacher
                if not user.full_name:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    try:
                        user.full_name = teacher.name
                        db.session.commit()
                        print(f"Updated user {user.id} full_name with teacher name: {teacher.name}")
                    except Exception as e:
                        print(f"Error updating user full_name: {str(e)}")
                        db.session.rollback()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if user.role == 'student' and user.group:
        try:
            schedule_item = Schedule.query.filter_by(group_name=user.group).first()
            if schedule_item:
                user_data['course'] = schedule_item.course
        except Exception as e:
            print(f"Error getting course from schedule: {str(e)}")

    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"Returning user data for ID {user_id}: {user_data}")

    return jsonify(user_data)


@app.route('/api/teachers/<int:user_id>', methods=['GET'])
@token_required
def get_teacher_info(current_user, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –ø–æ user_id"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.get(user_id)
        if not user:
            return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if user.role != 'teacher':
            return jsonify({'message': '–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º'}), 400

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Teacher
        teacher = Teacher.query.filter_by(user_id=user.id).first()

        if not teacher:
            return jsonify({
                'message': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                'user_data': {
                    'id': user.id,
                    'username': user.username,
                    'fullName': user.full_name
                }
            }), 404

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
        teacher_data = {
            'id': user.id,
            'teacher_id': teacher.id,
            'username': user.username,
            'fullName': teacher.name or user.full_name,
            'name': teacher.name,
            'department': teacher.department,
            'position': teacher.position,
            'role': 'teacher'
        }

        return jsonify(teacher_data), 200

    except Exception as e:
        print(f"Error getting teacher info: {str(e)}")
        return jsonify({'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {str(e)}'}), 500


# –î–æ–±–∞–≤—å—Ç–µ —Ç–∞–∫–∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
@app.route('/api/teachers/search', methods=['GET'])
@token_required
def search_teachers(current_user):
    """–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏"""
    try:
        name = request.args.get('name', '')
        if not name or len(name) < 3:
            return jsonify({'message': '–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'}), 400

        # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º
        teachers = Teacher.query.filter(Teacher.name.ilike(f'%{name}%')).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for teacher in teachers:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            user = None
            if teacher.user_id:
                user = User.query.get(teacher.user_id)

            results.append({
                'id': teacher.id,
                'name': teacher.name,
                'department': teacher.department,
                'position': teacher.position,
                'user_id': teacher.user_id,
                'has_account': teacher.has_account and user is not None
            })

        return jsonify(results), 200

    except Exception as e:
        print(f"Error searching teachers: {str(e)}")
        return jsonify({'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {str(e)}'}), 500


# Fix the password validation in api.py

@app.route('/api/user/change-password', methods=['POST'])
@token_required
def change_password_api(current_user):
    """Change user password"""
    try:
        data = request.json

        # Validate required fields
        if not data or not data.get('currentPassword') or not data.get('newPassword'):
            return jsonify({'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å', 'success': False}), 400

        current_password = data.get('currentPassword')
        new_password = data.get('newPassword')

        # Debug printout to help identify the issue (remove in production)
        print(f"Current user: {current_user.username}")
        print(f"Stored hashed password: {current_user.password}")
        print(f"Plain password (if available): {current_user.password_plain}")

        # FIXED: Proper password check - directly compare with plain password if available
        # This handles cases where the hashing algorithm might have issues
        password_correct = False
        if current_user.password_plain and current_password == current_user.password_plain:
            # Direct match with stored plain password
            password_correct = True
        else:
            # Fallback to hashed comparison
            password_correct = current_user.check_password(current_password)

        if not password_correct:
            return jsonify({'message': '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ', 'success': False}), 401

        # Check if new password is strong enough
        if len(new_password) < 6:
            return jsonify({'message': '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'success': False}), 400

        # Update password
        current_user.password_plain = new_password  # For admin view
        current_user.password = generate_password_hash(new_password)
        db.session.commit()

        return jsonify({
            'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
            'success': True
        }), 200
    except Exception as e:
        db.session.rollback()
        print(f"Error changing password: {str(e)}")
        return jsonify({
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}',
            'success': False
        }), 500


# REMOVED: Notification endpoints

# Helper function to check if username exists
def username_exists(username):
    try:
        return db.session.query(User).filter_by(username=username).first() is not None
    except Exception as e:
        print(f"Error checking username: {str(e)}")
        # In case of any error, return False to allow continuing
        # The uniqueness will still be enforced at the database level
        return False


def create_token(user_id):
    payload = {
        'exp': datetime.datetime.utcnow() + datetime.timedelta(days=7),
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ datetime.datetime.now(datetime.UTC) –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
        'iat': datetime.datetime.utcnow(),  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ datetime.datetime.now(datetime.UTC) –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
        'sub': str(user_id)  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫—É
    }
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SECRET_KEY —Ç–æ—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –Ω–µ None
    secret_key = app.config.get('SECRET_KEY')
    if not secret_key:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –ª—É—á—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        print("[CRITICAL ERROR] SECRET_KEY is missing during token creation!")
        raise ValueError("Server configuration error: SECRET_KEY is missing.")

    return jwt.encode(
        payload,
        secret_key,
        algorithm='HS256'
    )


@app.route('/api/auth/register', methods=['POST'])
def register():
    data = request.json

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    # Remove email from required fields to make it optional
    required_fields = ['password', 'fullName', 'role']
    for field in required_fields:
        if field not in data:
            return jsonify({'message': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400

    # Still validate email format if provided
    email = data.get('email', '')  # Default to empty string instead of None
    if email and '@' not in email:
        return jsonify({'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'}), 400

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    if 'username' not in data or not data['username']:
        username = generate_username(data['fullName'], data.get('group'), data.get('role'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username —É–Ω–∏–∫–∞–ª–µ–Ω
        attempt = 0
        base_username = username
        while username_exists(username):
            attempt += 1
            username = f"{base_username}{attempt}"
    else:
        username = data['username']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    if username_exists(username):
        return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

    try:
        # Create user with email field (empty string if not provided)
        new_user = User(
            username=username,
            password=data['password'],
            email=email,  # Set email (will be empty string if not provided)
            is_admin=False
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        new_user.role = data.get('role')
        new_user.full_name = data.get('fullName')
        new_user.group = data.get('group')
        new_user.faculty = data.get('faculty')

        # Add speciality data if provided
        if 'speciality' in data and data['speciality']:
            speciality_data = data['speciality']
            new_user.speciality_id = speciality_data.get('id')
            new_user.speciality_code = speciality_data.get('code')
            new_user.speciality_name = speciality_data.get('name')
            new_user.study_form = speciality_data.get('form')
            new_user.study_form_name = speciality_data.get('formName')

            # Set faculty from speciality if not provided separately
            if not new_user.faculty and speciality_data.get('faculty'):
                new_user.faculty = speciality_data.get('faculty')

        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if data.get('role') == 'student':
            new_user.verification_status = 'unverified'
        elif data.get('role') == 'teacher':
            new_user.verification_status = 'verified'  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã

        db.session.add(new_user)
        db.session.commit()

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        token = create_token(new_user.id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç–æ–∫–µ–Ω
        return jsonify({
            'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            'token': token,
            'user': {
                'id': new_user.id,
                'username': new_user.username,
                'email': email,  # Include email in response
                'fullName': new_user.full_name,
                'role': new_user.role,
                'group': new_user.group,
                'faculty': new_user.faculty,
                'verificationStatus': new_user.verification_status,
                'speciality': {
                    'id': new_user.speciality_id,
                    'code': new_user.speciality_code,
                    'name': new_user.speciality_name,
                    'form': new_user.study_form,
                    'formName': new_user.study_form_name
                } if new_user.speciality_id else None
            }
        }), 201

    except Exception as e:
        db.session.rollback()
        print(f"Error during registration: {str(e)}")
        error_details = str(e)

        # Check for specific database errors
        if "field 'email' doesn't have a default value" in error_details:
            return jsonify({
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ email –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            }), 500

        return jsonify({
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'error': error_details
        }), 500


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π endpoint –¥–ª—è –≤—Ö–æ–¥–∞ –≤ api.py

@app.route('/api/auth/login', methods=['POST'])
def login():
    data = request.json

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not data or not data.get('password'):
        return jsonify({'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å'}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (–ª–æ–≥–∏–Ω –∏–ª–∏ email)
    if not data.get('username') and not data.get('email'):
        return jsonify({'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω –∏–ª–∏ email'}), 400

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ email
    user = None
    if data.get('email'):
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω email, –∏—â–µ–º –ø–æ –Ω–µ–º—É
        user = User.query.filter_by(email=data['email']).first()
    else:
        # –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –ª–æ–≥–∏–Ω—É (username)
        user = User.query.filter_by(username=data['username']).first()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if not user or not user.check_password(data['password']):
        return jsonify({'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    token = create_token(user.id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = user.role or ('admin' if user.is_admin else 'unknown')

    # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    teacher_info = None
    if role == 'teacher':
        teacher = Teacher.query.filter_by(user_id=user.id).first()
        if teacher:
            teacher_info = {
                'position': teacher.position,
                'department': teacher.department,
                'name': teacher.name
            }

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
    user_data = {
        'id': user.id,
        'username': user.username,
        'fullName': user.full_name or (teacher_info['name'] if teacher_info else ''),
        'role': role,
        'group': user.group,
        'faculty': user.faculty,
        'department': teacher_info['department'] if teacher_info else None,
        'position': teacher_info['position'] if teacher_info else None,
        'verificationStatus': user.verification_status or 'verified',
        'email': user.email  # –î–æ–±–∞–≤–ª—è–µ–º email –≤ –æ—Ç–≤–µ—Ç
    }

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç–æ–∫–µ–Ω
    return jsonify({
        'token': token,
        'user': user_data
    }), 200


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ api.py

from models import Notification


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/api/notifications', methods=['GET'])
@token_required
def get_user_notifications(current_user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 20, type=int)
        unread_only = request.args.get('unread_only', 'false').lower() == 'true'
        notification_type = request.args.get('type')

        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
        query = Notification.query.filter_by(user_id=current_user.id)

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è
        if unread_only:
            query = query.filter_by(is_read=False)

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_type:
            query = query.filter_by(notification_type=notification_type)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        query = query.order_by(Notification.created_at.desc())

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        notifications = query.paginate(page=page, per_page=per_page)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        unread_count = Notification.query.filter_by(
            user_id=current_user.id,
            is_read=False
        ).count()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return jsonify({
            'notifications': [n.to_dict() for n in notifications.items],
            'unread_count': unread_count,
            'total_count': notifications.total,
            'page': page,
            'per_page': per_page,
            'pages': notifications.pages,
            'has_next': notifications.has_next,
            'has_prev': notifications.has_prev,
            'success': True
        }), 200

    except Exception as e:
        print(f"Error getting notifications: {str(e)}")
        return jsonify({
            'message': f"Error: {str(e)}",
            'success': False
        }), 500


# –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
@app.route('/api/notifications/<int:notification_id>/read', methods=['POST'])
@token_required
def mark_notification_read(current_user, notification_id):
    """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
    try:
        notification = Notification.query.get_or_404(notification_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if notification.user_id != current_user.id:
            return jsonify({
                'message': 'Access denied',
                'success': False
            }), 403

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        was_updated = notification.mark_as_read()
        db.session.commit()

        return jsonify({
            'message': 'Notification marked as read',
            'was_updated': was_updated,
            'success': True
        }), 200

    except Exception as e:
        db.session.rollback()
        print(f"Error marking notification as read: {str(e)}")
        return jsonify({
            'message': f"Error: {str(e)}",
            'success': False
        }), 500


# –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
@app.route('/api/notifications/read-all', methods=['POST'])
@token_required
def mark_all_notifications_read(current_user):
    """–û—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notifications = Notification.query.filter_by(
            user_id=current_user.id,
            is_read=False
        ).all()

        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        now = datetime.utcnow()
        count = 0

        for notification in notifications:
            notification.is_read = True
            notification.read_at = now
            count += 1

        db.session.commit()

        return jsonify({
            'message': f'{count} notifications marked as read',
            'count': count,
            'success': True
        }), 200

    except Exception as e:
        db.session.rollback()
        print(f"Error marking all notifications as read: {str(e)}")
        return jsonify({
            'message': f"Error: {str(e)}",
            'success': False
        }), 500


# –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@app.route('/api/notifications/<int:notification_id>', methods=['DELETE'])
@token_required
def delete_notification(current_user, notification_id):
    """–£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        notification = Notification.query.get_or_404(notification_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if notification.user_id != current_user.id:
            return jsonify({
                'message': 'Access denied',
                'success': False
            }), 403

        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        db.session.delete(notification)
        db.session.commit()

        return jsonify({
            'message': 'Notification deleted',
            'success': True
        }), 200

    except Exception as e:
        db.session.rollback()
        print(f"Error deleting notification: {str(e)}")
        return jsonify({
            'message': f"Error: {str(e)}",
            'success': False
        }), 500


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.route('/api/notifications/unread-count', methods=['GET'])
@token_required
def get_unread_count(current_user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        unread_count = Notification.query.filter_by(
            user_id=current_user.id,
            is_read=False
        ).count()

        return jsonify({
            'unread_count': unread_count,
            'success': True
        }), 200

    except Exception as e:
        print(f"Error getting unread count: {str(e)}")
        return jsonify({
            'message': f"Error: {str(e)}",
            'success': False
        }), 500

@app.route('/api/user/profile', methods=['GET'])
@token_required
def get_profile(current_user):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
    role = current_user.role or ('admin' if current_user.is_admin else 'unknown')

    # –ù–∞–ø—Ä—è–º—É—é –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –º–∏–Ω—É—è ORM
    try:
        # Add email to the SQL query
        query = """
        SELECT 
            id, 
            username, 
            full_name,
            email,              role, 
            `group`, 
            faculty, 
            verification_status, 
            student_card_image,
            speciality_id,
            speciality_code,
            speciality_name,
            study_form,
            study_form_name
        FROM user 
        WHERE id = :user_id
        """

        with db.engine.connect() as connection:
            # Use named parameters with a dictionary
            result = connection.execute(db.text(query), {"user_id": current_user.id})
            user_data = result.fetchone()

            if not user_data:
                return jsonify({'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            user_dict = dict(zip(result.keys(), user_data))
            print(f"DEBUG: DB query result: {user_dict}")
    except Exception as e:
        print(f"ERROR: Direct DB query failed: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ORM
        user_dict = {
            'id': current_user.id,
            'username': current_user.username,
            # Safely check if email attribute exists
            'email': getattr(current_user, 'email', None),
            'full_name': current_user.full_name,
            'role': current_user.role,
            'group': current_user.group,
            'faculty': current_user.faculty,
            'verification_status': current_user.verification_status,
            'student_card_image': current_user.student_card_image,
            'speciality_id': current_user.speciality_id,
            'speciality_code': current_user.speciality_code,
            'speciality_name': current_user.speciality_name,
            'study_form': current_user.study_form,
            'study_form_name': current_user.study_form_name,
        }

    # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    teacher_info = None
    if role == 'teacher':
        teacher = Teacher.query.filter_by(user_id=current_user.id).first()
        if teacher:
            teacher_info = {
                'position': teacher.position,
                'department': teacher.department,
                'name': teacher.name
            }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_data = {
        'id': user_dict['id'],
        'username': user_dict['username'],
        'email': user_dict.get('email'),  # Use .get() for safe access
        'fullName': user_dict['full_name'] or (teacher_info['name'] if teacher_info else ''),
        'role': user_dict['role'],
        'group': user_dict['group'],
        'faculty': user_dict['faculty'],
        'department': teacher_info['department'] if teacher_info else None,
        'position': teacher_info['position'] if teacher_info else None,
        'verificationStatus': user_dict['verification_status'] or 'verified',
        'studentCardImage': user_dict['student_card_image'],
        'speciality': {
            'id': user_dict['speciality_id'],
            'code': user_dict['speciality_code'],
            'name': user_dict['speciality_name'],
            'form': user_dict['study_form'],
            'formName': user_dict['study_form_name']
        }
    }

    # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if role == 'student' and user_dict['group']:
        try:
            schedule_query = "SELECT course FROM schedule WHERE group_name = :group_name LIMIT 1"
            with db.engine.connect() as connection:
                schedule_result = connection.execute(db.text(schedule_query), {"group_name": user_dict['group']})
                schedule_data = schedule_result.fetchone()

                if schedule_data:
                    profile_data['course'] = schedule_data[0]
                    print(f"DEBUG: Found course in schedule: {schedule_data[0]}")
        except Exception as e:
            print(f"DEBUG: Error fetching course from schedule: {str(e)}")

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"DEBUG: Final profile data: {profile_data}")

    return jsonify(profile_data), 200


@app.route('/api/schedule/course', methods=['GET'])
@token_required
def get_course_from_schedule(current_user):
    """Get course information from schedule based on group"""
    group = request.args.get('group') or (current_user.group if current_user.role == 'student' else None)

    if not group:
        return jsonify({'message': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞', 'success': False}), 400

    try:
        schedule_item = Schedule.query.filter_by(group_name=group).first()

        if not schedule_item:
            return jsonify({'message': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'success': False}), 404

        return jsonify({
            'course': schedule_item.course,
            'group': group,
            'success': True
        }), 200
    except Exception as e:
        print(f"Error fetching course info: {str(e)}")
        return jsonify({
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ: {str(e)}',
            'success': False
        }), 500


@app.route('/api/tickets', methods=['GET'])
@token_required
def get_user_tickets(current_user):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status = request.args.get('status', None)
        category = request.args.get('category', None)

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = Ticket.query.filter_by(user_id=current_user.id)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if status and status != 'all':
            query = query.filter_by(status=status)
        if category:
            query = query.filter_by(category=category)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        tickets = query.order_by(Ticket.updated_at.desc()).all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç JSON
        return jsonify([ticket.to_dict() for ticket in tickets]), 200

    except Exception as e:
        print(f"Error getting tickets: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
@app.route('/api/tickets', methods=['POST'])
@token_required
def create_ticket(current_user):
    try:
        data = request.json

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['title', 'category', 'message']
        for field in required_fields:
            if field not in data:
                return jsonify({"message": f"Field {field} is required"}), 400

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
        new_ticket = Ticket(
            user_id=current_user.id,
            title=data['title'],
            category=data['category'],
            priority=data.get('priority', 'medium'),
            status='new',
            has_admin_unread=True,
            has_user_unread=False
        )

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'related_type' in data and 'related_id' in data:
            new_ticket.related_type = data['related_type']
            new_ticket.related_id = data['related_id']

        db.session.add(new_ticket)
        db.session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —Ç–∏–∫–µ—Ç–∞

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = TicketMessage(
            ticket_id=new_ticket.id,
            user_id=current_user.id,
            is_from_admin=False,
            text=data['message'],
            is_read=True  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        )

        db.session.add(message)
        db.session.commit()

        return jsonify({
            "message": "Ticket created successfully",
            "ticket": new_ticket.to_dict()
        }), 201

    except Exception as e:
        db.session.rollback()
        print(f"Error creating ticket: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–∫–µ—Ç–∞
@app.route('/api/tickets/<int:ticket_id>', methods=['GET'])
@token_required
def get_ticket_details(current_user, ticket_id):
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        ticket = Ticket.query.get_or_404(ticket_id)

        if ticket.user_id != current_user.id and not current_user.is_admin:
            return jsonify({"message": "Access denied"}), 403

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        messages = [message.to_dict() for message in ticket.messages]

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –æ—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        if not current_user.is_admin and ticket.has_user_unread:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            unread_messages = TicketMessage.query.filter_by(
                ticket_id=ticket.id,
                is_from_admin=True,
                is_read=False
            ).all()

            # –û—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            for message in unread_messages:
                message.is_read = True

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            ticket.has_user_unread = False
            db.session.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        return jsonify({
            "ticket": ticket.to_dict(),
            "messages": messages
        }), 200

    except Exception as e:
        print(f"Error getting ticket details: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–∏–∫–µ—Ç—É
@app.route('/api/tickets/<int:ticket_id>/messages', methods=['POST'])
@token_required
def add_ticket_message(current_user, ticket_id):
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç
        ticket = Ticket.query.get_or_404(ticket_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if ticket.user_id != current_user.id and not current_user.is_admin:
            return jsonify({"message": "Access denied"}), 403

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        data = request.json
        if 'text' not in data or not data['text'].strip():
            return jsonify({"message": "Message text is required"}), 400

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        is_from_admin = current_user.is_admin

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message = TicketMessage(
            ticket_id=ticket.id,
            user_id=current_user.id,
            is_from_admin=is_from_admin,
            text=data['text'],
            is_read=False
        )

        db.session.add(new_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if 'status' in data and data['status'] and current_user.is_admin:
            ticket.status = data['status']

        # –ï—Å–ª–∏ –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è
        if ticket.status == 'closed' and not is_from_admin:
            ticket.status = 'waiting'

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if is_from_admin:
            ticket.has_user_unread = True
        else:
            ticket.has_admin_unread = True

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ticket.updated_at = datetime.datetime.utcnow()

        db.session.commit()

        return jsonify({
            "message": "Message added successfully",
            "ticket_message": new_message.to_dict()
        }), 201

    except Exception as e:
        db.session.rollback()
        print(f"Error adding message: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@app.route('/api/tickets/<int:ticket_id>/attachment', methods=['POST'])
@token_required
def upload_ticket_attachment(current_user, ticket_id):
    try:
        # Debug output to help diagnose issues
        print(f"Starting file upload for ticket {ticket_id} by user {current_user.id}")
        print(f"Request form data: {request.form}")
        print(f"Request files: {list(request.files.keys()) if request.files else 'No files'}")

        # Find the ticket
        ticket = Ticket.query.get_or_404(ticket_id)
        print(f"Found ticket: {ticket.id}, user_id: {ticket.user_id}")

        # Check access rights
        if ticket.user_id != current_user.id and not current_user.is_admin:
            return jsonify({"message": "Access denied"}), 403

        # Check if a file was sent
        if 'file' not in request.files:
            print("No file part in request")
            return jsonify({"message": "No file part"}), 400

        file = request.files['file']
        print(f"Received file: {file.filename}, content type: {file.content_type}")

        # Check the file has a name
        if file.filename == '':
            return jsonify({"message": "No selected file"}), 400

        # Optional message text
        message_text = request.form.get('text', '')
        print(f"Associated message text: {message_text}")

        # Ensure upload directories exist
        try:
            os.makedirs(UPLOAD_FOLDER, exist_ok=True)
            os.makedirs(TICKET_ATTACHMENTS_FOLDER, exist_ok=True)
            print(f"Ensured directories exist: {TICKET_ATTACHMENTS_FOLDER}")
        except Exception as dir_error:
            print(f"Error creating directories: {str(dir_error)}")
            return jsonify({"message": f"Server storage error: {str(dir_error)}"}), 500

        # Generate a safe filename
        try:
            original_filename = secure_filename(file.filename)
            print(f"Secured original filename: {original_filename}")

            # Generate a unique filename using UUID
            file_ext = os.path.splitext(original_filename)[1]
            filename = f"{uuid.uuid4()}{file_ext}"
            file_path = os.path.join(TICKET_ATTACHMENTS_FOLDER, filename)
            print(f"Generated unique filename: {filename}")
            print(f"Full file path: {file_path}")
        except Exception as filename_error:
            print(f"Error processing filename: {str(filename_error)}")
            return jsonify({"message": f"Filename error: {str(filename_error)}"}), 500

        # Save the file
        try:
            file.save(file_path)
            file_size = os.path.getsize(file_path)
            print(f"File saved successfully. Size: {file_size} bytes")
        except Exception as save_error:
            print(f"Error saving file: {str(save_error)}")
            return jsonify({"message": f"File save error: {str(save_error)}"}), 500

        # Determine file type
        try:
            file_ext = os.path.splitext(original_filename)[1].lower()
            if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                file_type = 'image'
            else:
                file_type = 'document'
            print(f"Determined file type: {file_type}")
        except Exception as type_error:
            print(f"Error determining file type: {str(type_error)}")
            # Default to document type if we can't determine
            file_type = 'document'

        # Create message and attachment records
        try:
            # Begin transaction
            is_from_admin = current_user.is_admin

            # Create the message first
            new_message = TicketMessage(
                ticket_id=ticket.id,
                user_id=current_user.id,
                is_from_admin=is_from_admin,
                text=message_text,
                attachment=filename,
                is_read=False
            )
            db.session.add(new_message)
            db.session.flush()  # Get the message ID without committing

            print(f"Created message record with ID: {new_message.id}")

            # Now create the attachment record
            attachment = TicketAttachment(
                message_id=new_message.id,
                filename=filename,
                original_filename=original_filename,
                file_type=file_type,
                file_size=file_size
            )
            db.session.add(attachment)
            print(f"Created attachment record for message: {new_message.id}")

            # Update ticket unread flags and timestamp
            if is_from_admin:
                ticket.has_user_unread = True
            else:
                ticket.has_admin_unread = True

            ticket.updated_at = datetime.datetime.utcnow()
            print(f"Updated ticket timestamps and unread flags")

            # Commit all changes
            db.session.commit()
            print(f"Transaction committed successfully")

            # Prepare response
            return jsonify({
                "message": "File uploaded successfully",
                "ticket_message": new_message.to_dict()
            }), 201

        except Exception as db_error:
            db.session.rollback()
            print(f"Database error: {str(db_error)}")

            # Try to remove the file if we couldn't create the records
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    print(f"Removed file after database error: {file_path}")
            except Exception as cleanup_error:
                print(f"Error during cleanup: {str(cleanup_error)}")

            return jsonify({"message": f"Database error: {str(db_error)}"}), 500

    except Exception as e:
        db.session.rollback()
        print(f"Unexpected error in upload_ticket_attachment: {str(e)}")
        # Print exception traceback for debugging
        import traceback
        traceback.print_exc()
        return jsonify({"message": f"Server error: {str(e)}"}), 500


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@app.route('/api/uploads/ticket_attachments/<filename>', methods=['GET'])
@token_required
def get_ticket_attachment(current_user, filename):
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        attachment = TicketAttachment.query.filter_by(filename=filename).first_or_404()

        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–∏–∫–µ—Ç
        message = TicketMessage.query.get_or_404(attachment.message_id)
        ticket = Ticket.query.get_or_404(message.ticket_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≤–ª–∞–¥–µ–ª–µ—Ü —Ç–∏–∫–µ—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω)
        if ticket.user_id != current_user.id and not current_user.is_admin:
            return jsonify({"message": "Access denied"}), 403

        return send_from_directory(TICKET_ATTACHMENTS_FOLDER, filename)

    except Exception as e:
        print(f"Error getting attachment: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
@app.route('/api/tickets/<int:ticket_id>/status', methods=['PUT'])
@token_required
def update_ticket_status(current_user, ticket_id):
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç
        ticket = Ticket.query.get_or_404(ticket_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        is_owner = ticket.user_id == current_user.id
        if not is_owner and not current_user.is_admin:
            return jsonify({"message": "Access denied"}), 403

        data = request.json
        if 'status' not in data:
            return jsonify({"message": "Status is required"}), 400

        new_status = data['status']
        comment = data.get('comment', '')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        valid_statuses = ['new', 'in_progress', 'waiting', 'resolved', 'closed']
        if new_status not in valid_statuses:
            return jsonify({"message": "Invalid status"}), 400

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
        if is_owner and not current_user.is_admin:
            if new_status not in ['closed', 'waiting']:
                return jsonify({"message": "You can only close the ticket or reopen it"}), 403

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        ticket.status = new_status
        ticket.updated_at = datetime.datetime.utcnow()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if comment:
            status_message = TicketMessage(
                ticket_id=ticket.id,
                user_id=current_user.id,
                is_from_admin=current_user.is_admin,
                text=comment,
                is_read=False
            )
            db.session.add(status_message)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if current_user.is_admin:
                ticket.has_user_unread = True
            else:
                ticket.has_admin_unread = True

        db.session.commit()

        return jsonify({
            "message": "Ticket status updated successfully",
            "ticket": ticket.to_dict()
        }), 200

    except Exception as e:
        db.session.rollback()
        print(f"Error updating ticket status: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/api/tickets/unread-count', methods=['GET'])
@token_required
def get_unread_tickets_count(current_user):
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç—ã —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        unread_tickets = Ticket.query.filter_by(
            user_id=current_user.id,
            has_user_unread=True
        ).count()

        return jsonify({
            "unread_tickets": unread_tickets
        }), 200

    except Exception as e:
        print(f"Error getting unread tickets count: {str(e)}")
        return jsonify({"message": f"Error: {str(e)}"}), 500


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞
@app.route('/api/student/verify', methods=['POST'])
@token_required
def upload_student_card(current_user):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
    if current_user.role != 'student':
        return jsonify({'message': '–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç'}), 403

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    if 'studentCard' not in request.files:
        return jsonify({'message': '–§–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}), 400

    file = request.files['studentCard']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    if file.filename == '':
        return jsonify({'message': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"{uuid.uuid4()}{os.path.splitext(file.filename)[1]}"
    file_path = os.path.join(STUDENT_CARDS_FOLDER, filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file.save(file_path)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–µ
    previous_status = current_user.verification_status

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user.student_card_image = filename
    current_user.verification_status = 'pending'

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    log_entry = VerificationLog(
        student_id=current_user.id,
        action='upload',
        status_before=previous_status,
        status_after='pending',
        comment='–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞'
    )

    db.session.add(log_entry)
    db.session.commit()

    return jsonify({
        'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
        'status': 'pending'
    }), 200


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
@app.route('/api/student/verification-status', methods=['GET'])
@token_required
def get_verification_status(current_user):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
    if current_user.role != 'student':
        return jsonify({'message': '–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'}), 403

    # Get status message based on verification status
    status_message = ""
    if current_user.verification_status == 'pending':
        status_message = "–í–∞—à —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è."
    elif current_user.verification_status == 'verified':
        status_message = "–í–∞—à —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω."
    elif current_user.verification_status == 'rejected':
        status_message = "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞."
    else:  # unverified
        status_message = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç."

    return jsonify({
        'status': current_user.verification_status or 'unverified',
        'message': status_message,
        'updatedAt': datetime.datetime.now().isoformat()
    }), 200


# Endpoint to cancel a pending verification and reupload
@app.route('/api/student/cancel-verification', methods=['POST'])
@token_required
def cancel_verification(current_user):
    """Cancel a pending verification to allow reupload"""
    # Check that the user is a student
    if current_user.role != 'student':
        return jsonify({'message': '–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é'}), 403

    # Check that status is pending or rejected
    if current_user.verification_status not in ['pending', 'rejected']:
        return jsonify({'message': '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ'}), 400

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–µ
    previous_status = current_user.verification_status

    # Delete the current image if it exists
    if current_user.student_card_image:
        try:
            file_path = os.path.join(STUDENT_CARDS_FOLDER, current_user.student_card_image)
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            # Log error but continue with status update
            print(f"Error removing student card image: {str(e)}")

    # Reset verification status
    current_user.student_card_image = None
    current_user.verification_status = 'unverified'

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    log_entry = VerificationLog(
        student_id=current_user.id,
        action='cancel',
        status_before=previous_status,
        status_after='unverified',
        comment='–û—Ç–º–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    )

    db.session.add(log_entry)
    db.session.commit()

    return jsonify({
        'message': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç —Å–Ω–æ–≤–∞.',
        'status': 'unverified'
    }), 200


# Endpoint to reupload student card after rejection
@app.route('/api/student/reupload', methods=['POST'])
@token_required
def reupload_student_card(current_user):
    """Reupload student card after rejection"""
    # Check that the user is a student
    if current_user.role != 'student':
        return jsonify({'message': '–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç'}), 403

    # Check if status is rejected or unverified (we already have cancel-verification for pending)
    if current_user.verification_status not in ['rejected', 'unverified']:
        return jsonify({'message': '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'}), 400

    # Check that a file was sent
    if 'studentCard' not in request.files:
        return jsonify({'message': '–§–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}), 400

    file = request.files['studentCard']

    # Check that the file is not empty
    if file.filename == '':
        return jsonify({'message': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–µ
    previous_status = current_user.verification_status

    # Delete the current image if it exists
    if current_user.student_card_image:
        try:
            file_path = os.path.join(STUDENT_CARDS_FOLDER, current_user.student_card_image)
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            # Log error but continue with upload
            print(f"Error removing previous student card image: {str(e)}")

    # Generate unique filename
    filename = f"{uuid.uuid4()}{os.path.splitext(file.filename)[1]}"
    file_path = os.path.join(STUDENT_CARDS_FOLDER, filename)

    # Save the file
    file.save(file_path)

    # Update user data
    current_user.student_card_image = filename
    current_user.verification_status = 'pending'

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    log_entry = VerificationLog(
        student_id=current_user.id,
        action='reupload',
        status_before=previous_status,
        status_after='pending',
        comment='–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞'
    )

    db.session.add(log_entry)
    db.session.commit()

    return jsonify({
        'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
        'status': 'pending'
    }), 200


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞
@app.route('/api/uploads/student_cards/<filename>', methods=['GET'])
@token_required
def get_student_card(current_user, filename):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ–∞–π–ª–∞)
    if not current_user.is_admin and current_user.student_card_image != filename:
        return jsonify({'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    return send_from_directory(STUDENT_CARDS_FOLDER, filename)


# Update the get_schedule function in api.py

@app.route('/api/schedule', methods=['GET'])
@token_required
def get_schedule(current_user):
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    group = request.args.get('group')
    date = request.args.get('date')
    teacher_id = request.args.get('teacher_id')

    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = Schedule.query

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if current_user.role == 'student':
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ - –ø–æ –≥—Ä—É–ø–ø–µ
        if not group and current_user.group:
            group = current_user.group

        if group:
            query = query.filter_by(group_name=group)

    elif current_user.role == 'teacher':
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º mapping —á–µ—Ä–µ–∑ ScheduleTeacher
        teacher = Teacher.query.filter_by(user_id=current_user.id).first()

        if teacher:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ ScheduleTeacher, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
            mapped_schedule_teachers = ScheduleTeacher.query.filter_by(
                mapped_teacher_id=teacher.id,
                active=True
            ).all()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            teacher_names = [teacher.name]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∏–∑ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for schedule_teacher in mapped_schedule_teachers:
                if schedule_teacher.name and schedule_teacher.name not in teacher_names:
                    teacher_names.append(schedule_teacher.name)

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–º—è, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Å–µ–º –∏–º–µ–Ω–∞–º
            if teacher_names:
                query = query.filter(Schedule.teacher_name.in_(teacher_names))
                print(f"Filtering schedule for teacher by names: {teacher_names}")
            else:
                print(f"No teacher names found for user_id={current_user.id}, teacher_id={teacher.id}")

    # –û–±—â–∏–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if date:
        try:
            query_date = datetime.datetime.strptime(date, '%Y-%m-%d').date()
            query = query.filter_by(date=query_date)
        except ValueError:
            pass

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    query = query.order_by(Schedule.date, Schedule.time_start)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    query = query.limit(100)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    schedules = query.all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    result = []
    for schedule in schedules:
        result.append({
            'id': schedule.id,
            'date': schedule.date.strftime('%Y-%m-%d'),
            'timeStart': schedule.time_start,
            'timeEnd': schedule.time_end,
            'weekday': schedule.weekday,
            'subject': schedule.subject,
            'lessonType': schedule.lesson_type,
            'group': schedule.group_name,
            'teacher': schedule.teacher_name,
            'auditory': schedule.auditory,
            'subgroup': schedule.subgroup
        })

    return jsonify(result), 200


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({'message': '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404


@app.errorhandler(500)
def internal_error(error):
    return jsonify({'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


def send_push_message(token, title, message, data=None):
    """Send push notification using Firebase Cloud Messaging or Expo Push service"""
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é data –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥–∏
    safe_data = {**data} if data else {}
    if 'token' in safe_data:
        safe_data['token'] = safe_data['token'][:10] + '...' if safe_data['token'] else None

    print(f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    print(f"   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    print(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    print(f"   - –î–∞–Ω–Ω—ã–µ: {safe_data}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    token_type = safe_data.get('tokenType', 'unknown')
    print(f"   - –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: {token_type}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    is_expo_token = token.startswith('ExponentPushToken[')
    is_jwt_token = token.count('.') == 2 and token.startswith('ey')

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω - Expo —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç–∏–ø —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ –∫–∞–∫ 'expo'
    if is_expo_token or token_type == 'expo':
        print(f"   üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω Expo —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Expo Push API")
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            import uuid
            import requests
            import json
            from datetime import datetime

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Expo Push API
            expo_message = {
                'to': token,
                'title': title,
                'body': message,
                'data': data or {},
                'sound': 'default'
            }

            # –î–ª—è iOS –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if data and data.get('platform') == 'ios':
                expo_message.update({
                    'badge': 1,
                    'priority': 'high',
                    '_displayInForeground': True
                })

            print(f"   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Expo —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {json.dumps(expo_message)[:100]}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Expo Push API
            response = requests.post(
                'https://exp.host/--/api/v2/push/send',
                json=expo_message,
                headers={
                    'Accept': 'application/json',
                    'Accept-encoding': 'gzip, deflate',
                    'Content-Type': 'application/json',
                },
                timeout=10
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                response_data = response.json()
                print(f"   ‚úÖ Expo Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response_data}")

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç Expo API
                if (response_data.get('data') and
                        isinstance(response_data['data'], dict) and
                        response_data['data'].get('status') == 'ok'):
                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                    ticket_id = response_data['data'].get('id', str(uuid.uuid4()))
                    return {"success": True, "message_id": f"expo_{ticket_id}"}
                elif (response_data.get('data') and
                      isinstance(response_data['data'], list) and
                      len(response_data['data']) > 0 and
                      response_data['data'][0].get('status') == 'ok'):
                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
                    ticket_id = response_data['data'][0].get('id', str(uuid.uuid4()))
                    return {"success": True, "message_id": f"expo_{ticket_id}"}
                else:
                    # –ï—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ 200 OK
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ Expo API, –Ω–æ —Å—Ç–∞—Ç—É—Å 200. –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º.")
                    return {"success": True, "message_id": f"expo_{str(uuid.uuid4())}"}
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Expo: {response.status_code}, {response.text}")
                return {"success": False, "error": f"Expo API error: {response.status_code}"}
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ Expo: {str(e)}")
            import traceback
            traceback.print_exc()
            return {"success": False, "error": str(e)}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ JWT —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    elif is_jwt_token:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ push-—Ç–æ–∫–µ–Ω–∞")
        return {"success": False, "error": "The token is a JWT authentication token, not a push token"}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Firebase –¥–ª—è FCM —Ç–æ–∫–µ–Ω–æ–≤
    elif not FIREBASE_AVAILABLE:
        print(f"   ‚ùå Firebase Admin SDK –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return {"success": False, "message": "Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

    # –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ APNs –Ω—É–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    elif token_type == 'apns':
        print(f"   ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–∞—Ç–∏–≤–Ω—ã–π APNs —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Firebase –Ω–∞–ø—Ä—è–º—É—é")
        print(f"   ‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Expo —Ç–æ–∫–µ–Ω—ã –¥–ª—è iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        return {"success": False, "error": "APNs tokens not supported directly. Use Expo tokens for iOS"}

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Firebase FCM
    else:
        try:
            print(f"   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Firebase Admin SDK")

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification = messaging.Notification(
                title=title,
                body=message
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
            android_config = messaging.AndroidConfig(
                priority='high',
                notification=messaging.AndroidNotification(
                    icon='notification_icon',
                    color='#770002'
                )
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS (—á–µ—Ä–µ–∑ FCM)
            apns_config = messaging.APNSConfig(
                payload=messaging.APNSPayload(
                    aps=messaging.Aps(
                        content_available=True,
                        sound='default',
                        badge=1,
                        mutable_content=True,
                        alert=messaging.ApsAlert(
                            title=title,
                            body=message
                        )
                    )
                ),
                headers={
                    'apns-priority': '10',
                    'apns-push-type': 'alert'
                }
            )

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ data
            if data is None:
                data = {}

            # FCM —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            fcm_data = {}
            for key, value in data.items():
                fcm_data[str(key)] = str(value) if value is not None else ""

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Message
            message_obj = messaging.Message(
                token=token,
                notification=notification,
                android=android_config,
                apns=apns_config,
                data=fcm_data
            )

            print(f"   üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è FCM")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = messaging.send(message_obj)
            print(f"   ‚úÖ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response}")
            return {"success": True, "message_id": response}
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            print(f"   - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            traceback.print_exc()
            return {"success": False, "error": str(e)}



def create_and_send_notification(recipient_id, title, body, notification_type, sender_id=None, data=None,
                                 related_type=None, related_id=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        recipient_id (int): ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        body (str): –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_type (str): –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('ticket', 'chat', 'system', –∏ —Ç.–¥.)
        sender_id (int, optional): ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (None –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
        data (dict, optional): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        related_type (str, optional): –¢–∏–ø —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ ('ticket', 'schedule', –∏ —Ç.–¥.)
        related_id (int, optional): ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ {'db_success': bool, 'push_success': bool, 'notification_id': int}
    """
    result = {
        'db_success': False,
        'push_success': False,
        'notification_id': None,
        'push_receipts': []
    }

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        notification = Notification.create_notification(
            user_id=recipient_id,
            title=title,
            body=body,
            notification_type=notification_type,
            sender_id=sender_id,
            data=data,
            related_type=related_type,
            related_id=related_id
        )

        db.session.add(notification)
        db.session.commit()

        result['db_success'] = True
        result['notification_id'] = notification.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        device_tokens = DeviceToken.query.filter_by(user_id=recipient_id).all()

        if device_tokens:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            push_data = data.copy() if data else {}

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            push_data.update({
                'notification_id': notification.id,
                'type': notification_type,
                'sender_id': sender_id,
                'timestamp': datetime.utcnow().isoformat()
            })

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if related_type and related_id:
                push_data.update({
                    'related_type': related_type,
                    'related_id': related_id
                })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            successful_deliveries = 0

            for token_obj in device_tokens:
                push_result = send_push_message(
                    token_obj.token,
                    title,
                    body,
                    push_data
                )

                result['push_receipts'].append({
                    'device_id': token_obj.id,
                    'success': push_result.get('success', False),
                    'error': push_result.get('error')
                })

                if push_result.get('success'):
                    successful_deliveries += 1

            if successful_deliveries > 0:
                result['push_success'] = True

        return result

    except Exception as e:
        if 'notification_id' in result and result['notification_id']:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push,
            # –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            db.session.commit()
            print(f"Error sending push notification, but DB record was created: {str(e)}")
        else:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            db.session.rollback()
            print(f"Error creating notification record: {str(e)}")

        result['error'] = str(e)
        return result


@app.route('/api/device/send-notification', methods=['POST'])
@token_required
def send_push_notification(current_user):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        data = request.json

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not data or not data.get('recipient_id'):
            return jsonify({
                'message': '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                'success': False
            }), 400

        recipient_id = data.get('recipient_id')
        title = data.get('title', '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        body = data.get('body', '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        notification_data = data.get('data', {})

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        notification_data['sender_id'] = current_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º–æ–æ—Ç–ø—Ä–∞–≤–∫–∞
        if str(recipient_id) == str(current_user.id):
            return jsonify({
                'message': '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ',
                'success': False,
                'status': 'self_notification'
            }), 400

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        device_tokens = DeviceToken.query.filter_by(user_id=recipient_id).all()

        if not device_tokens:
            return jsonify({
                'message': '–£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
                'success': False,
                'status': 'no_tokens'
            }), 200  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, –∞ –Ω–µ –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è —Å–∏—Ç—É–∞—Ü–∏—è

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        successful_deliveries = 0
        delivery_receipts = []

        for device in device_tokens:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Firebase –∏–ª–∏ Expo
                if device.token_type == 'expo' or device.token.startswith('ExponentPushToken['):
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Expo Push API
                    try:
                        expo_response = requests.post(
                            'https://exp.host/--/api/v2/push/send',
                            json={
                                'to': device.token,
                                'title': title,
                                'body': body,
                                'data': notification_data,
                                'sound': 'default'
                            },
                            headers={
                                'Accept': 'application/json',
                                'Accept-encoding': 'gzip, deflate',
                                'Content-Type': 'application/json',
                            }
                        )

                        if expo_response.status_code == 200:
                            result = expo_response.json()
                            if result.get('data') and result['data'][0].get('status') == 'ok':
                                successful_deliveries += 1
                                delivery_receipts.append({
                                    'platform': 'expo',
                                    'token': device.token[:10] + '...',  # –°–∫—Ä—ã–≤–∞–µ–º –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
                                    'success': True
                                })
                            else:
                                delivery_receipts.append({
                                    'platform': 'expo',
                                    'token': device.token[:10] + '...',
                                    'success': False,
                                    'error': result.get('data', [{}])[0].get('message', 'Unknown error')
                                })
                        else:
                            delivery_receipts.append({
                                'platform': 'expo',
                                'token': device.token[:10] + '...',
                                'success': False,
                                'error': f"Error {expo_response.status_code}: {expo_response.text}"
                            })
                    except Exception as expo_error:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ Expo: {str(expo_error)}")
                        delivery_receipts.append({
                            'platform': 'expo',
                            'token': device.token[:10] + '...',
                            'success': False,
                            'error': str(expo_error)
                        })
                else:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Firebase Cloud Messaging
                    if not FIREBASE_AVAILABLE:
                        delivery_receipts.append({
                            'platform': 'fcm',
                            'token': device.token[:10] + '...',
                            'success': False,
                            'error': 'Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                        })
                        continue

                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        is_android = device.platform.lower() == 'android'
                        is_ios = device.platform.lower() == 'ios'

                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        notification = messaging.Notification(
                            title=title,
                            body=body
                        )

                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
                        android_config = None
                        if is_android:
                            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ç–∏–ø–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ data)
                            channel_id = 'default'
                            if notification_data and notification_data.get('type'):
                                notification_type = notification_data.get('type')
                                if notification_type == 'chat':
                                    channel_id = 'chat'
                                elif notification_type == 'schedule':
                                    channel_id = 'schedule'
                                elif notification_type == 'ticket':
                                    channel_id = 'tickets'
                                elif notification_type == 'news':
                                    channel_id = 'news'

                            android_config = messaging.AndroidConfig(
                                priority='high',
                                notification=messaging.AndroidNotification(
                                    icon='notification_icon',
                                    color='#770002',
                                    channel_id=channel_id
                                )
                            )

                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
                        apns_config = None
                        if is_ios:
                            apns_config = messaging.APNSConfig(
                                payload=messaging.APNSPayload(
                                    aps=messaging.Aps(
                                        content_available=True,
                                        sound='default'
                                    )
                                )
                            )

                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Message
                        message_obj = messaging.Message(
                            token=device.token,
                            notification=notification,
                            data={str(k): str(v) for k, v in notification_data.items()},
                            # FCM —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            android=android_config,
                            apns=apns_config
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        response = messaging.send(message_obj)
                        successful_deliveries += 1
                        delivery_receipts.append({
                            'platform': 'fcm',
                            'token': device.token[:10] + '...',
                            'success': True,
                            'message_id': response
                        })
                    except Exception as fcm_error:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ FCM: {str(fcm_error)}")
                        delivery_receipts.append({
                            'platform': 'fcm',
                            'token': device.token[:10] + '...',
                            'success': False,
                            'error': str(fcm_error)
                        })
            except Exception as device_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(device_error)}")
                delivery_receipts.append({
                    'platform': 'unknown',
                    'token': device.token[:10] + '...' if device.token else 'none',
                    'success': False,
                    'error': str(device_error)
                })

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if successful_deliveries > 0:
            return jsonify({
                'message': f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {successful_deliveries} –∏–∑ {len(device_tokens)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
                'success': True,
                'receipts': delivery_receipts
            }), 200
        else:
            return jsonify({
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                'success': False,
                'receipts': delivery_receipts
            }), 200  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        return jsonify({
            'message': f'–û—à–∏–±–∫–∞: {str(e)}',
            'success': False
        }), 500





# Enhanced device registration endpoint for api.py
# Add or replace this function in your api.py file

@app.route('/api/device/register', methods=['POST'])
@token_required
def register_device(current_user):
    """Enhanced device token registration with better logging and error handling"""
    try:
        print(f"üì± Device registration attempt for user_id={current_user.id}")

        # Get request data with thorough validation
        data = request.json
        if not data:
            print(f"üì± Missing request data for user_id={current_user.id}")
            return jsonify({'message': 'No data provided', 'success': False}), 400

        # Log all incoming data (sensitive parts obscured)
        token_preview = data.get('token', '')[:15] + '...' if data.get('token') else 'None'
        print(f"üì± Received token data: token={token_preview}, "
              f"platform={data.get('platform', 'unknown')}, "
              f"device={data.get('device', 'unknown')}, "
              f"token_type={data.get('tokenType', 'unknown')}")

        # Validate token
        token = data.get('token')
        if not token:
            print(f"üì± Token not provided for user_id={current_user.id}")
            return jsonify({'message': 'Token not provided', 'success': False}), 400

        device = data.get('device', 'Unknown device')
        platform = data.get('platform', 'unknown')
        token_type = data.get('tokenType', 'unknown')

        # Check if token already exists
        existing_token = DeviceToken.query.filter_by(token=token).first()

        if existing_token:
            # Update existing token
            print(f"üì± Updating existing token for user_id={current_user.id}")
            existing_token.user_id = current_user.id
            existing_token.device_name = device
            existing_token.platform = platform
            existing_token.token_type = token_type
            existing_token.last_used_at = datetime.datetime.utcnow()
            action = 'updated'
        else:
            # Create new token record
            print(f"üì± Creating new token for user_id={current_user.id}")
            new_token = DeviceToken(
                user_id=current_user.id,
                token=token,
                device_name=device,
                platform=platform,
                token_type=token_type,
                created_at=datetime.datetime.utcnow(),
                last_used_at=datetime.datetime.utcnow()
            )
            db.session.add(new_token)
            action = 'registered'

        # Commit changes with error handling
        try:
            db.session.commit()
            print(f"üì± Successfully {action} token for user_id={current_user.id}")
            return jsonify({
                'message': f'Device token {action}',
                'success': True,
                'action': action
            }), 200
        except Exception as db_error:
            db.session.rollback()
            print(f"üì± Database error during token {action}: {str(db_error)}")
            return jsonify({
                'message': f'Database error: {str(db_error)}',
                'success': False,
                'error': 'database_error'
            }), 500

    except Exception as e:
        print(f"üì± Unexpected error registering token for user_id={current_user.id}: {str(e)}")
        return jsonify({
            'message': f'Error: {str(e)}',
            'success': False,
            'error': 'unexpected_error'
        }), 500


@app.route('/api/device/unregister', methods=['POST'])
@token_required
def unregister_device(current_user):
    """Improved device token unregistration with better logging and error handling"""
    try:
        print(f"üì± Device unregistration attempt for user_id={current_user.id}")

        data = request.json

        if not data:
            print(f"üì± Missing request data for unregistration, user_id={current_user.id}")
            return jsonify({'message': 'No data provided', 'success': False}), 400

        token = data.get('token')
        if not token:
            print(f"üì± Token not provided for unregistration, user_id={current_user.id}")

            # Special case: unregister all tokens for this user
            if data.get('unregister_all'):
                print(f"üì± Unregistering ALL tokens for user_id={current_user.id}")
                deleted = DeviceToken.query.filter_by(user_id=current_user.id).delete()
                db.session.commit()
                return jsonify({
                    'message': f'Removed all device tokens ({deleted} tokens)',
                    'success': True,
                    'deleted_count': deleted
                }), 200

            return jsonify({'message': 'Token not provided', 'success': False}), 400

        # Find and delete the token
        token_preview = token[:15] + '...' if len(token) > 15 else token
        print(f"üì± Unregistering token: {token_preview} for user_id={current_user.id}")

        device_token = DeviceToken.query.filter_by(token=token).first()
        if device_token:
            # Extra security: Only allow deletion if token belongs to current user
            if device_token.user_id != current_user.id:
                print(f"üì± Token belongs to user_id={device_token.user_id}, not current user={current_user.id}")
                return jsonify({
                    'message': 'You are not authorized to unregister this token',
                    'success': False
                }), 403

            # Delete the token
            db.session.delete(device_token)
            db.session.commit()
            print(f"üì± Successfully unregistered token for user_id={current_user.id}")

            return jsonify({
                'message': 'Device token unregistered',
                'success': True,
                'deleted_count': 1
            }), 200
        else:
            print(f"üì± Token not found for unregistration, user_id={current_user.id}")
            return jsonify({
                'message': 'Token not found',
                'success': False
            }), 404

    except Exception as e:
        db.session.rollback()
        print(f"üì± Error unregistering device token for user_id={current_user.id}: {str(e)}")
        return jsonify({
            'message': f'Error: {str(e)}',
            'success': False
        }), 500


@app.route('/api/device/test-notification', methods=['POST'])
@token_required
def test_notification(current_user):
    """Improved test notification endpoint with better support for different token types"""
    try:
        print(f"üß™ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç user_id={current_user.id}")
        print(f"   - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request.json}")

        data = request.json
        token = data.get('token')
        token_type = data.get('tokenType', 'unknown')
        device = data.get('device', 'Unknown device')
        platform = data.get('platform', 'unknown')

        if not token:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({
                'message': 'Token not provided',
                'success': False
            }), 400

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        token_preview = token[:15] + '...' if len(token) > 15 else token
        print(f"   üì± –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è:")
        print(f"   - –¢–æ–∫–µ–Ω: {token_preview}")
        print(f"   - –¢–∏–ø: {token_type}")
        print(f"   - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
        print(f"   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è send_push_message
        test_data = {
            'type': 'test',
            'timestamp': str(datetime.datetime.now().timestamp()),
            'device': device,
            'platform': platform,
            'tokenType': token_type  # –í–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞!
        }

        # –î–ª—è iOS –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if platform.lower() == 'ios':
            test_data.update({
                'sound': 'default',
                'badge': '1',
                'priority': 'high',
                'content_available': '1'
            })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ validate_fcm_token)
        result = send_push_message(
            token,
            '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            f'–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {platform} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
            test_data
        )

        print(f"   üîö –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result}")

        if result.get('success'):
            return jsonify({
                'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
                'success': True,
                'message_id': result.get('message_id')
            }), 200
        else:
            return jsonify({
                'message': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result.get('error')}",
                'success': False,
                'error': result.get('error')
            }), 500

    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'message': f'–û—à–∏–±–∫–∞: {str(e)}',
            'success': False
        }), 500


if __name__ == '__main__':
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ–ª–∏ User –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            inspect_columns = db.inspect(db.engine).get_columns('user')
            column_names = [column['name'] for column in inspect_columns]

            # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            with db.engine.connect() as connection:
                if 'role' not in column_names:
                    connection.execute(db.text("ALTER TABLE user ADD COLUMN role VARCHAR(20) DEFAULT NULL"))

                if 'verification_status' not in column_names:
                    connection.execute(
                        db.text("ALTER TABLE user ADD COLUMN verification_status VARCHAR(20) DEFAULT NULL"))

                if 'student_card_image' not in column_names:
                    connection.execute(
                        db.text("ALTER TABLE user ADD COLUMN student_card_image VARCHAR(255) DEFAULT NULL"))

                if 'full_name' not in column_names:
                    connection.execute(db.text("ALTER TABLE user ADD COLUMN full_name VARCHAR(255) DEFAULT NULL"))

                if 'group' not in column_names:
                    connection.execute(db.text("ALTER TABLE user ADD COLUMN `group` VARCHAR(50) DEFAULT NULL"))

                if 'faculty' not in column_names:
                    connection.execute(db.text("ALTER TABLE user ADD COLUMN faculty VARCHAR(255) DEFAULT NULL"))

                # Add email column if it doesn't exist
                if 'email' not in column_names:
                    print("Adding missing email column to user table")
                    connection.execute(
                        db.text("ALTER TABLE user ADD COLUMN email VARCHAR(120) DEFAULT NULL UNIQUE"))

                connection.commit()

            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    app.run(debug=True, host='0.0.0.0', port=5001)
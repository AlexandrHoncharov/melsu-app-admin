// –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è chatService.js —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
import AsyncStorage from '@react-native-async-storage/async-storage';
import {auth, database} from '../config/firebase';
import {
    get,
    limitToLast,
    off,
    onValue,
    orderByChild,
    push,
    query,
    ref,
    serverTimestamp,
    set,
    update
} from 'firebase/database';
import {signInAnonymously, signInWithCustomToken} from 'firebase/auth';
import apiClient from '../api/apiClient';
import * as Device from 'expo-device';

class ChatService {
    constructor() {
        this.currentUser = null;
        this.initialized = false;
        this.listeners = {};
        this.forcedUserId = null; // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.initializationInProgress = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
        this.deviceToken = null; // –¢–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    forceCurrentUserId(userId) {
        if (!userId) {
            console.warn('Cannot force empty user ID');
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        this.forcedUserId = String(userId);
        console.log(`üîß Forced user ID set to: ${this.forcedUserId}`);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ ID
        if (this.currentUser) {
            this.currentUser.id = this.forcedUserId;
            console.log(`üîß Updated current user ID to forced value: ${this.currentUser.id}`);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á–µ—Ç–æ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ)
    getCurrentUserId() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–π ID, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.forcedUserId) {
            return this.forcedUserId;
        }

        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.currentUser && this.currentUser.id) {
            return String(this.currentUser.id);
        }

        return null;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async initialize() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏—é - –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (this.initializationInProgress) {
            console.log('Initialization already in progress, waiting...');
            // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            await new Promise(resolve => setTimeout(resolve, 500));
            return this.initialized;
        }

        // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
        if (this.initialized && this.currentUser) {
            return true;
        }

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            this.initializationInProgress = true;

            // –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
            this.currentUser = null;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AsyncStorage
            const userDataString = await AsyncStorage.getItem('userData');
            if (!userDataString) {
                console.error('No user data in AsyncStorage');
                this.initializationInProgress = false;
                return false;
            }

            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userData = JSON.parse(userDataString);

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É
            if (userData && userData.id !== undefined) {
                userData.id = String(userData.id);
            } else {
                console.error('User ID is missing in async storage data');
                this.initializationInProgress = false;
                return false;
            }

            // –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–Ω ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (this.forcedUserId) {
                console.log(`üîß Using forced user ID: ${this.forcedUserId} instead of ${userData.id}`);
                userData.id = this.forcedUserId;
            }

            this.currentUser = userData;
            console.log(`ChatService: Initialized with user: ID=${this.currentUser.id}, Name=${this.currentUser.fullName || this.currentUser.username}, Role=${this.currentUser.role}`);

            // –ü—Ä–æ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Firebase –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
            try {
                const response = await apiClient.post('/auth/firebase-token');
                const {token} = response.data;
                await signInWithCustomToken(auth, token);
                console.log('Firebase authentication successful with token');
            } catch (authError) {
                console.warn('Firebase auth failed with token, trying anonymous auth:', authError);

                try {
                    await signInAnonymously(auth);
                    console.log('Anonymous auth successful');
                } catch (anonError) {
                    console.warn('Anonymous auth failed:', anonError);
                }
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Firebase
            try {
                const userRef = ref(database, `users/${this.currentUser.id}`);
                await set(userRef, {
                    id: this.currentUser.id,
                    username: this.currentUser.username,
                    displayName: this.currentUser.fullName || this.currentUser.username,
                    role: this.currentUser.role,
                    group: this.currentUser.group,
                    department: this.currentUser.department,
                    lastActive: serverTimestamp()
                });
            } catch (dbError) {
                console.warn('Error writing user data to database:', dbError);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            try {
                const deviceTokenString = await AsyncStorage.getItem('devicePushToken');
                if (deviceTokenString) {
                    this.deviceToken = deviceTokenString;
                }
            } catch (tokenError) {
                console.warn('Error loading device token:', tokenError);
            }

            this.initialized = true;
            this.initializationInProgress = false;
            return true;
        } catch (error) {
            console.error('Error initializing chat service:', error);
            this.initialized = false;
            this.initializationInProgress = false;
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    cleanup() {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        Object.keys(this.listeners).forEach(key => {
            const listener = this.listeners[key];
            if (listener && listener.path && listener.event) {
                try {
                    off(ref(database, listener.path), listener.event);
                    console.log(`Unsubscribed from ${listener.path}`);
                } catch (e) {
                    console.warn(`Error unsubscribing from ${listener.path}:`, e);
                }
            }
        });

        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        this.listeners = {};

        // Log cleanup
        console.log('ChatService cleanup completed, all listeners removed');
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async setDeviceToken(token) {
        if (!token) return false;

        this.deviceToken = token;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ AsyncStorage
        try {
            await AsyncStorage.setItem('devicePushToken', token);
        } catch (error) {
            console.warn('Error saving device token to AsyncStorage:', error);
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (this.initialized && this.currentUser) {
            try {
                await this.registerDeviceToken(token);
                return true;
            } catch (error) {
                console.warn('Error registering device token:', error);
                return false;
            }
        }

        return true;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async registerDeviceToken(token) {
        if (!token || !this.initialized || !this.currentUser) {
            return false;
        }

        try {
            const response = await apiClient.post('/device/register', {
                token: token,
                platform: Platform.OS,
                device_name: Device.modelName || 'Unknown device'
            });

            console.log('Device token registered successfully:', response.data);
            return true;
        } catch (error) {
            console.warn('Error registering device token on server:', error);
            return false;
        }
    }

    // –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ unregisterDeviceToken —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ chatService.js

// –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ unregisterDeviceToken –¥–ª—è chatService.js
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –Ω–∞ —ç—Ç–æ—Ç:

// –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
async unregisterDeviceToken() {
    if (!this.deviceToken) {
        console.log('No device token to unregister');
        return false;
    }

    try {
        console.log(`Attempting to unregister device token: ${this.deviceToken.substring(0, 10)}...`);

        // –í—ã–∑–æ–≤ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        const response = await apiClient.post('/device/unregister', {
            token: this.deviceToken
        });

        console.log('Device token unregistration response:', response.data);

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ AsyncStorage
        try {
            await AsyncStorage.removeItem('devicePushToken');
        } catch (storageError) {
            console.warn('Error removing device token from AsyncStorage:', storageError);
        }

        this.deviceToken = null;

        return true;
    } catch (error) {
        console.warn('Error unregistering device token from server:', error);

        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try {
            await AsyncStorage.removeItem('devicePushToken');
            this.deviceToken = null;
        } catch (storageError) {
            console.warn('Error removing device token from AsyncStorage:', storageError);
        }

        return false;
    }
}

    // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)
    async reset() {
        console.log('Full reset of ChatService initiated');

        // –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (this.deviceToken) {
            try {
                await this.unregisterDeviceToken();
            } catch (tokenError) {
                console.warn('Error unregistering device token during reset:', tokenError);
            }
        }

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π Firebase
        this.cleanup();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentUser = null;
        this.initialized = false;
        this.forcedUserId = null;
        this.initializationInProgress = false;
        this.deviceToken = null;

        // –í—ã—Ö–æ–¥ –∏–∑ Firebase Auth
        try {
            if (auth.currentUser) {
                await auth.signOut();
                console.log('Successfully signed out from Firebase Auth');
            }
        } catch (error) {
            console.warn('Error signing out from Firebase Auth:', error);
        }

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.listeners = {};

        console.log('ChatService completely reset - all state cleared, listeners removed, user signed out');

        return true;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async createPersonalChat(otherUserId) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.initialized || !this.currentUser) {
            const initResult = await this.initialize();
            if (!initResult) {
                throw new Error('Failed to initialize chat service');
            }
        }

        if (!this.currentUser || !this.currentUser.id) {
            throw new Error('Current user ID is not available');
        }

        // –í–°–ï–ì–î–ê –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        otherUserId = String(otherUserId);
        const myUserId = this.getCurrentUserId();

        console.log(`Creating personal chat between ${myUserId} and ${otherUserId}`);

        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —á–∞—Ç–∞ –∫–∞–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const chatUsers = [myUserId, otherUserId].sort();
            const chatId = `personal_${chatUsers.join('_')}`;

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            let otherUserInfo = null;
            let currentUserInfo = {
                id: myUserId,
                displayName: this.currentUser.fullName || this.currentUser.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${myUserId}`,
                role: this.currentUser.role || 'unknown',
                group: this.currentUser.group,
                department: this.currentUser.department
            };

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ API
            try {
                const response = await apiClient.get(`/users/${otherUserId}`);
                otherUserInfo = response.data;
                console.log(`Got other user info from API:`, otherUserInfo);
            } catch (apiError) {
                console.warn(`Failed to get user ${otherUserId} data from API:`, apiError);

                // –ü—Ä–æ–±—É–µ–º Firebase –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                try {
                    const userSnapshot = await get(ref(database, `users/${otherUserId}`));
                    if (userSnapshot.exists()) {
                        otherUserInfo = userSnapshot.val();
                        console.log(`Got other user info from Firebase:`, otherUserInfo);
                    }
                } catch (fbError) {
                    console.warn(`Failed to get user ${otherUserId} data from Firebase:`, fbError);
                }
            }

            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            if (!otherUserInfo) {
                otherUserInfo = {
                    id: otherUserId, displayName: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${otherUserId}`, role: 'unknown'
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —á–∞—Ç
            const chatRef = ref(database, `chats/${chatId}`);
            const snapshot = await get(chatRef);

            if (!snapshot.exists()) {
                console.log(`Creating new chat ${chatId}`);

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                await set(chatRef, {
                    id: chatId, type: 'personal', createdAt: serverTimestamp(), participants: {
                        [myUserId]: true, [otherUserId]: true
                    }
                });

                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                // –í–ê–ñ–ù–û: –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                let otherUserName = '';

                if (otherUserInfo.fullName) {
                    otherUserName = otherUserInfo.fullName;
                } else if (otherUserInfo.displayName) {
                    otherUserName = otherUserInfo.displayName;
                } else if (otherUserInfo.name) {
                    otherUserName = otherUserInfo.name;
                } else {
                    otherUserName = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${otherUserId}`;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–≤–∏—Å—è—â—É—é –æ—Ç —Ä–æ–ª–∏
                let otherUserDetails = '';
                if (otherUserInfo.role === 'student' && otherUserInfo.group) {
                    otherUserDetails = ` (${otherUserInfo.group})`;
                } else if (otherUserInfo.role === 'teacher' && otherUserInfo.department) {
                    otherUserDetails = ` (${otherUserInfo.department})`;
                }

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ –¥–µ—Ç–∞–ª–∏
                const otherUserDisplayName = otherUserName + otherUserDetails;

                console.log(`Other user display name: ${otherUserDisplayName}`);

                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await set(ref(database, `userChats/${myUserId}/${chatId}`), {
                    id: chatId,
                    type: 'personal',
                    withUser: otherUserId,
                    withUserRole: otherUserInfo.role || 'unknown',
                    withUserName: otherUserDisplayName,
                    updatedAt: serverTimestamp()
                });

                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let currentUserName = this.currentUser.fullName || this.currentUser.username;
                let currentUserDetails = '';
                if (this.currentUser.role === 'student' && this.currentUser.group) {
                    currentUserDetails = ` (${this.currentUser.group})`;
                } else if (this.currentUser.role === 'teacher' && this.currentUser.department) {
                    currentUserDetails = ` (${this.currentUser.department})`;
                }

                const currentUserDisplayName = currentUserName + currentUserDetails;

                console.log(`Current user display name: ${currentUserDisplayName}`);

                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await set(ref(database, `userChats/${otherUserId}/${chatId}`), {
                    id: chatId,
                    type: 'personal',
                    withUser: myUserId,
                    withUserName: currentUserDisplayName,
                    withUserRole: this.currentUser.role || 'unknown',
                    updatedAt: serverTimestamp()
                });

                console.log(`Personal chat ${chatId} successfully created`);
            } else {
                console.log(`Chat ${chatId} already exists, updating`);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
                try {
                    const myUserChatRef = ref(database, `userChats/${myUserId}/${chatId}`);
                    const myUserChatSnapshot = await get(myUserChatRef);

                    if (myUserChatSnapshot.exists()) {
                        const chatData = myUserChatSnapshot.val();
                        const otherUserName = otherUserInfo.fullName || otherUserInfo.displayName || otherUserInfo.name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${otherUserId}`;

                        // –ï—Å–ª–∏ –∏–º—è –ø–æ–º–µ–Ω—è–ª–æ—Å—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
                        if (!chatData.withUserName || chatData.withUserName === `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${otherUserId}`) {
                            console.log(`Updating other user name to: ${otherUserName}`);
                            await update(myUserChatRef, {
                                withUserName: otherUserName, updatedAt: serverTimestamp()
                            });
                        }
                    }
                } catch (updateError) {
                    console.warn('Error updating chat name:', updateError);
                }
            }

            return chatId;
        } catch (error) {
            console.error('Error creating personal chat:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
    async createGroupChat(groupName) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.initialized || !this.currentUser) {
            const initResult = await this.initialize();
            if (!initResult) {
                throw new Error('Failed to initialize chat service');
            }
        }

        if (!this.currentUser || !this.currentUser.id) {
            throw new Error('Current user ID is not available');
        }

        // –¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
        if (this.currentUser.role !== 'teacher') {
            throw new Error('Only teachers can create group chats');
        }

        if (!groupName) {
            throw new Error('Group name is required');
        }

        const myUserId = this.getCurrentUserId();
        console.log(`Creating group chat for group ${groupName} by teacher ${myUserId}`);

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
            const chatId = `group_${groupName.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}`;
            const displayName = `–ì—Ä—É–ø–ø–∞ ${groupName}`;

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            let students = [];
            try {
                const response = await apiClient.get('/users', { params: { role: 'student', group: groupName } });
                students = response.data || [];
                console.log(`Found ${students.length} students in group ${groupName}`);
            } catch (error) {
                console.warn(`Error fetching students for group ${groupName}:`, error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ - –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç,
                // –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –≤–æ–π–¥—É—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = { [myUserId]: true };
            students.forEach(student => {
                if (student.id) {
                    participants[String(student.id)] = true;
                }
            });

            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –≤ Firebase
            const chatRef = ref(database, `chats/${chatId}`);
            await set(chatRef, {
                id: chatId,
                type: 'group',
                name: displayName,
                groupCode: groupName,
                createdBy: myUserId,
                createdAt: serverTimestamp(),
                participants: participants
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—è
            await set(ref(database, `userChats/${myUserId}/${chatId}`), {
                id: chatId,
                type: 'group',
                name: displayName,
                groupCode: groupName,
                updatedAt: serverTimestamp()
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–∫–∏ —á–∞—Ç–æ–≤ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            for (const student of students) {
                if (student.id) {
                    await set(ref(database, `userChats/${String(student.id)}/${chatId}`), {
                        id: chatId,
                        type: 'group',
                        name: displayName,
                        groupCode: groupName,
                        updatedAt: serverTimestamp()
                    });
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messageData = {
                id: push(ref(database, `messages/${chatId}`)).key,
                senderId: myUserId,
                senderName: this.currentUser.fullName || this.currentUser.username || `–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å`,
                text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupName}!`,
                timestamp: serverTimestamp(),
                read: { [myUserId]: true }
            };

            await set(ref(database, `messages/${chatId}/${messageData.id}`), messageData);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            const lastMessageInfo = {
                id: messageData.id,
                text: messageData.text.length > 30 ? `${messageData.text.substring(0, 30)}...` : messageData.text,
                senderId: myUserId,
                timestamp: serverTimestamp()
            };

            await update(chatRef, {
                lastMessage: lastMessageInfo
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for (const userId of Object.keys(participants)) {
                await update(ref(database, `userChats/${userId}/${chatId}`), {
                    lastMessage: lastMessageInfo,
                    updatedAt: serverTimestamp()
                });
            }

            console.log(`Group chat ${chatId} successfully created for group ${groupName}`);
            return chatId;
        } catch (error) {
            console.error('Error creating group chat:', error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    async sendMessage(chatId, text) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.initialized || !this.currentUser) {
            const initResult = await this.initialize();
            if (!initResult) {
                throw new Error('User not initialized. Cannot send message.');
            }
        }

        if (!chatId || !text.trim()) {
            throw new Error('Chat ID or message text is empty');
        }

        // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID
        const myUserId = this.getCurrentUserId();
        const senderName = this.currentUser.fullName || this.currentUser.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${myUserId}`;

        console.log(`Sending message from ${myUserId} (${senderName}) to chat ${chatId}`);

        try {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const newMessageRef = push(ref(database, `messages/${chatId}`));
            const messageId = newMessageRef.key;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messageData = {
                id: messageId,
                senderId: myUserId,
                senderName: senderName,
                text,
                timestamp: serverTimestamp(),
                read: {[myUserId]: true}
            };

            await set(newMessageRef, messageData);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
            const lastMessageInfo = {
                id: messageId,
                text: text.length > 30 ? `${text.substring(0, 30)}...` : text,
                senderId: myUserId,
                timestamp: serverTimestamp()
            };

            await update(ref(database, `chats/${chatId}`), {
                lastMessage: lastMessageInfo
            });

            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            const chatSnapshot = await get(ref(database, `chats/${chatId}/participants`));
            const participants = chatSnapshot.val() || {};

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            let chatName = '';
            if (chatId.startsWith('group_')) {
                const chatSnapshot = await get(ref(database, `chats/${chatId}`));
                const chatData = chatSnapshot.val();
                chatName = chatData?.name || '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç';
            } else {
                chatName = '–õ–∏—á–Ω—ã–π —á–∞—Ç';
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const notificationPromises = [];

            for (const userId of Object.keys(participants)) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await update(ref(database, `userChats/${userId}/${chatId}`), {
                    lastMessage: lastMessageInfo, updatedAt: serverTimestamp()
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                if (userId !== myUserId) {
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
                    const messagePreview = text.length > 50 ? `${text.substring(0, 50)}...` : text;

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —á–∞—Ç–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
                    const notificationSenderName = `${senderName} (${chatName})`;

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –æ–∂–∏–¥–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    notificationPromises.push(
                        this.sendNotificationToUser(userId, chatId, messagePreview, notificationSenderName)
                            .catch(e => {
                                // –≠—Ç–∞ –æ—à–∏–±–∫–∞ —É–∂–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ sendNotificationToUser
                                // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–∞–ª—å—à–µ
                                return { success: false, error: e.message };
                            })
                    );
                }
            }

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            if (notificationPromises.length > 0) {
                try {
                    await Promise.allSettled(notificationPromises);
                } catch (notifError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    console.log('Some notifications may have failed, but message was sent successfully');
                }
            }

            console.log(`Message sent successfully to chat ${chatId}`);
            return messageId;
        } catch (error) {
            console.error('Error sending message:', error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async sendNotificationToUser(recipientId, chatId, messagePreview, senderName) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if (!recipientId || !chatId || !messagePreview) {
                console.log(`Skipping notification: Invalid arguments for user ${recipientId}`);
                return {success: false, skipped: true, reason: 'invalid_arguments'};
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏ –º—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
            const myUserId = this.getCurrentUserId();
            if (recipientId === myUserId) {
                console.log(`Skipping notification: Cannot send to self (${recipientId})`);
                return {success: false, skipped: true, reason: 'self_notification'};
            }

            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö/—Å–∏–º—É–ª—è—Ç–æ—Ä–∞—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            // –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            /*
            if (__DEV__ && simulatorRegex.test(Device.modelName)) {
                console.log(`Skipping notification in dev/simulator for user ${recipientId}`);
                return {success: false, skipped: true, reason: 'dev_simulator'};
            }
            */

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await apiClient.post('/chat/send-notification', {
                recipient_id: recipientId,
                chat_id: chatId,
                message_preview: messagePreview,
                sender_name: senderName
            });

            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π, –Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
            if (response.data?.status === 'no_tokens') {
                console.log(`User ${recipientId} has no registered devices for notifications`);
                return {success: false, skipped: true, reason: 'no_tokens'};
            }

            // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            return {success: true, receipt: response.data};
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É "No device tokens"
            if (error.message && (
                error.message.includes('No device tokens') ||
                error.message.includes('not found for recipient')
            )) {
                console.log(`User ${recipientId} has no registered devices for notifications`);
                return {success: false, skipped: true, reason: 'no_tokens'};
            }

            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –±–µ–∑ –±—Ä–æ—Å–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            console.log(`Failed to send notification to user ${recipientId}: ${error.message}`);
            return {success: false, error: error.message};
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserChats() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.initialized || !this.currentUser) {
            const initResult = await this.initialize();
            if (!initResult) {
                console.error('Failed to initialize when getting user chats');
                return [];
            }
        }

        if (!this.currentUser || !this.currentUser.id) {
            console.error('No current user available');
            return [];
        }

        // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID
        const myUserId = this.getCurrentUserId();

        try {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if (this.listeners.userChats) {
                off(ref(database, this.listeners.userChats.path), this.listeners.userChats.event);
                delete this.listeners.userChats;
            }

            const path = `userChats/${myUserId}`;
            console.log(`Getting chats for user ${myUserId}`);

            return new Promise((resolve) => {
                const userChatsRef = ref(database, path);

                const handler = onValue(userChatsRef, (snapshot) => {
                    const chatsData = snapshot.val() || {};

                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
                    const chats = Object.entries(chatsData).map(([id, data]) => {
                        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ withUser –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
                        if (data.withUser) {
                            data.withUser = String(data.withUser);
                        }

                        return {
                            id, ...data
                        };
                    });

                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
                    chats.sort((a, b) => {
                        const timeA = a.updatedAt || 0;
                        const timeB = b.updatedAt || 0;
                        return timeB - timeA;
                    });

                    console.log(`Loaded ${chats.length} chats for user ${myUserId}`);
                    resolve(chats);
                }, (error) => {
                    console.error('Error getting user chats:', error);
                    resolve([]);
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø–∏—Å–∫–∏
                this.listeners.userChats = {path, event: 'value', handler};
            });
        } catch (error) {
            console.error('Error in getUserChats:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    async getChatMessages(chatId, limit = 50) {
        if (!chatId) {
            console.error('Chat ID is empty');
            return [];
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.initialized || !this.currentUser) {
            const initResult = await this.initialize();
            if (!initResult) {
                console.error('Failed to initialize when getting chat messages');
                return [];
            }
        }

        if (!this.currentUser || !this.currentUser.id) {
            console.error('Current user is not initialized');
            return [];
        }

        // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID
        const myUserId = this.getCurrentUserId();

        try {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            const listenerKey = `messages_${chatId}`;
            if (this.listeners[listenerKey]) {
                off(ref(database, this.listeners[listenerKey].path), this.listeners[listenerKey].event);
                delete this.listeners[listenerKey];
            }

            const path = `messages/${chatId}`;
            console.log(`Getting messages for chat ${chatId}`);

            return new Promise((resolve) => {
                const messagesQuery = query(ref(database, path), orderByChild('timestamp'), limitToLast(limit));

                const handler = onValue(messagesQuery, (snapshot) => {
                    const messagesData = snapshot.val() || {};

                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
                    const messages = Object.values(messagesData);
                    messages.sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0));

                    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    const processedMessages = messages.map(message => {
                        // 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º senderId –≤ —Å—Ç—Ä–æ–∫—É
                        const senderId = String(message.senderId || '');

                        // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        const isFromCurrentUser = senderId === myUserId;

                        return {
                            ...message, senderId, isFromCurrentUser, // 3. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                            senderName: message.senderName || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderId}`
                        };
                    });

                    console.log(`Loaded ${processedMessages.length} messages for chat ${chatId}`);
                    resolve(processedMessages);
                }, (error) => {
                    console.error(`Error getting messages for chat ${chatId}:`, error);
                    resolve([]);
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø–∏—Å–∫–∏
                this.listeners[listenerKey] = {path, event: 'value', handler};
            });
        } catch (error) {
            console.error('Error in getChatMessages:', error);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    async getChatInfo(chatId) {
        if (!chatId) {
            console.error('Chat ID is empty');
            return null;
        }

        try {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            const listenerKey = `chatInfo_${chatId}`;
            if (this.listeners[listenerKey]) {
                off(ref(database, this.listeners[listenerKey].path), this.listeners[listenerKey].event);
                delete this.listeners[listenerKey];
            }

            const path = `chats/${chatId}`;

            return new Promise((resolve) => {
                const chatRef = ref(database, path);

                const handler = onValue(chatRef, (snapshot) => {
                    const chatData = snapshot.val() || null;

                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º senderId
                    if (chatData && chatData.lastMessage && chatData.lastMessage.senderId) {
                        chatData.lastMessage.senderId = String(chatData.lastMessage.senderId);
                    }

                    resolve(chatData);
                }, (error) => {
                    console.error(`Error getting chat info for ${chatId}:`, error);
                    resolve(null);
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø–∏—Å–∫–∏
                this.listeners[listenerKey] = {path, event: 'value', handler};
            });
        } catch (error) {
            console.error('Error in getChatInfo:', error);
            return null;
        }
    }

    // –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    async markMessagesAsRead(chatId) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.initialized || !this.currentUser) {
            const initResult = await this.initialize();
            if (!initResult) return;
        }

        if (!this.currentUser || !this.currentUser.id) return;
        if (!chatId) return;

        // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID
        const myUserId = this.getCurrentUserId();

        try {
            const messagesRef = ref(database, `messages/${chatId}`);
            const snapshot = await get(messagesRef);

            if (!snapshot.exists()) return;

            const updates = {};
            let updateCount = 0;

            // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            snapshot.forEach((childSnapshot) => {
                const message = childSnapshot.val() || {};

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫—É
                const messageSenderId = String(message.senderId || '');

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                if (messageSenderId === myUserId || (message.read && message.read[myUserId])) {
                    return;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                updates[`messages/${chatId}/${childSnapshot.key}/read/${myUserId}`] = true;
                updateCount++;
            });

            // –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
            if (updateCount > 0) {
                await update(ref(database), updates);
                console.log(`Marked ${updateCount} messages as read in chat ${chatId}`);
            }
        } catch (error) {
            console.warn('Error marking messages as read:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const chatService = new ChatService();
export default chatService;